# https://mseeeen.msen.jp/override-each-directorys-git-attributes/
# https://qooga.jb-jk.net/wp/how-to-specify-language-on-github/
# https://neos21.net/blog/2019/11/26-02.html
# https://qiita.com/ukaznil/items/e09b7899758c991ba176


# 改行コード設定
# 全てのファイルのうち、テキストと判断したファイルは LF に変換する
* text=auto
 # .txt ファイルは改行コード変換を行う (上のアスタリスク * 指定に倣うので LF に変換する)
*.txt text
# .vcproj ファイルは強制的に CRLF に変換する
*.vcproj text eol=crlf
 # .sh ファイルは強制的に LF に変換する
*.sh text eol-lf
# .jpg ファイルはテキストとして解釈しない
*.jpg -text


# 差分設定
*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php


# 言語統計設定
# *.css linguist-vendored
# *.scss linguist-vendored
# *.js linguist-vendored

# backupファイルは絶対に納品しない
*~ export-ignore
# DS_Storeファイルも絶対いらない
.DS_Store export-ignore
# .gitignoreだけもらっても，先方には無用の長物
.gitignore export-ignore
# .gitattributes自身も納品する必要はない←ポイント！
.gitattributes export-ignore
/.github export-ignore
CHANGELOG.md export-ignore


# 自動生成用の関数
# .bashrc/.zshrc

# function git_archive() {
#   # 現在の場所
#   readonly local CURR_DIR=`\pwd`

#   # gitリポジトリのroot
#   readonly local REPOSITORY_DIR=`\git rev-parse --show-toplevel 2> /dev/null`

#   # gitリポジトリかチェック
#   if [ -z "${REPOSITORY_DIR}" ]; then
#     echo '### This is not the repository root'
#     return
#   fi

#   # リポジトリrootにcd
#   \cd ${REPOSITORY_DIR} > /dev/null

#   # .gitattributesの作成（存在していなかった場合）
#   readonly local GIT_ATTRIBUTES_FILENAME='.gitattributes'
#   if [ ! -f ${GIT_ATTRIBUTES_FILENAME} ]; then
#   {
#     echo '*~ export-ignore'
#     echo '.DS_Store export-ignore'
#     echo '.gitignore export-ignore'
#     echo "${GIT_ATTRIBUTES_FILENAME} export-ignore"
#   } > ${GIT_ATTRIBUTES_FILENAME}
#   fi

#   # リポジトリがcleanかチェック
#   if [ -n "$(\git status --porcelain)" ]; then
#     echo '### There are uncommited changes'
#     \git status
#     \cd ${CURR_DIR} > /dev/null
#     return
#   fi

#   # ディレクトリ名取得，先頭のドットがあれば除去する
#   readonly local REPOSITORY_DIRNAME=`echo $(\basename ${REPOSITORY_DIR}) | sed s:^[\.]*::`

#   # パス取得
#   readonly local REPOSITORY_PARENT_DIR=`\dirname ${REPOSITORY_DIR}`

#   # ブランチ名取得
#   readonly local BRANCH_NAME=`echo $(\git symbolic-ref --short HEAD) | sed s:/:-:g`

#   # hash値取得
#   readonly local HASH=`\git rev-parse --short=7 HEAD`

#   # 納品!!
#   readonly local ZIP_NAME="${REPOSITORY_PARENT_DIR}/${REPOSITORY_DIRNAME}-${BRANCH_NAME}-${HASH}.zip"
#   \git archive --format=zip HEAD > ${ZIP_NAME} && {
#     echo '#========#'
#     echo '# Result #'
#     echo '#========#'
#     echo "Archived this repository as ${ZIP_NAME}"
#   }

#   # 元の場所に戻る
#   \cd ${CURR_DIR} > /dev/null
# }
