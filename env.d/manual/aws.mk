#todo [AWS Tips]

# AWS マネジメントコンソール
# https://aws.amazon.com/jp/console/


#? ---- EC2の起動とEC2にログイン ----

# ⑴ EC2を起動させる
# EC2
# ↓
# インスタンス
# ↓
# アクション
# ↓
# インスタンスの状態
# ↓
# 開始

# ⑵ Elastic IPを割り当ててEC2に紐付ける
# Elastic IP
# ↓
# Elastic IP アドレスを割り当てる
# ↓
# 割り当て
# ↓
# アクション
# ↓
# Elastic IP アドレスの関連付け
# インスタンス: 割り当てるEC2インスタンスを選択
# プライベート IP アドレス: そのプライベート IPを選択
# ↓
# 関連付け
# ↓
# インスタンスに行って確認
# ・インスタンス:  i-0e99000eb739989a1 (aws-and-infra-web)Elastic IP: 54.249.105.88
# ・パブリックIPがElastic IPと一致しているか確認
# ↓
# Elastic IP = パブリックIPをコピー: 54.249.105.88

# ⑶ EC2にログインする
# ターミナル
# ↓
# ssh -i 秘密鍵のパス ec2-user@Elastic IP
# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.249.105.88


#? ---- 料金がかからないように後片付け ----

# ①Elastic IPアドレスの解放

# MC
# ↓
# EC2
# ↓
# Elastic IP
# ↓
# [アクション]
# ↓
# [アドレスの関連付けの解除]
# ↓
# [アドレスの解放]

#! 🚨Elastic IPを解放するとRoute53で設定したホストゾーンのAレコードの値が古くなってしまう。
#! 再度関連付けてEC2を起動しドメイン名でアクセスする場合は、Aレコードを新しいElastic IPで編集する必要がある。

# ----------------

# ②EC2インスタンスの停止

# インスタンス
# ↓
# [アクション]
# ↓
# [インスタンスの状態]
# ↓
# [停止]

# これで、Elastic IPからもEC2からも料金が発生しなくなった。
# 忘れると料金が発生してしまうので、勉強のときは一区切り付いたら料金が発生しないようにしておく。


#? ---- Elastic IP の料金を理解する - AWS ----

# すべての Amazon EC2 インスタンスが終了されているにも関わらず、Elastic IP アドレスの料金が請求されているのはなぜですか?
# https://aws.amazon.com/jp/premiumsupport/knowledge-center/elastic-ip-charges/


# 次の条件がすべて満たされている限り、Elastic IP アドレスに料金は発生しません。

# ・Elastic IP アドレスが EC2 インスタンスに関連付けられている。
# ・Elastic IP アドレスに関連付けられているインスタンスが実行中である。
# ・インスタンスには、1 つの Elastic IP アドレスしかアタッチされていない。
# ・Elastic IP アドレスが、アタッチされているネットワークインターフェイスに関連付けられている。詳細については、ネットワークインターフェイスをご参照ください。


# Elastic IP アドレスが不要な場合は、IP アドレスを解放することで請求を停止できます。

# ----------------

# 【AWS】Elastic IPアドレス（EIP）の独特な料金体系
# https://sayjoyblog.com/aws-eip/

# 課金対象外となるための条件
# Elastic IP アドレスが EC2 インスタンスに関連付けられている。
# Elastic IP アドレスに関連付けられているインスタンスが実行中である。
# インスタンスに 1 つの Elastic IP アドレスしか添付されていない。（※2）
# ※2：私の理解では1つ目のEIPのみが無料、2つ目以降は有料となる。


# 【ElasticIP】解説・手順・料金まとめ。そもそもIPアドレスとは？
# https://hiyowa-na-engineer.com/aws-how-to-eip/


# ==== EC2 + Wordpress ====

# https://www.udemy.com/course/aws-and-infra/


# **** 使用サービス一覧 ****

# ◯CloudTrail

# ◯VPC
# ・VPC
# ・サブネット
# ・ルートテーブル
# ・インターネットゲートウェイ

# ◯EC2
# ・インスタンス
# ・AMI
# ・ELASTIC BLOCK STORE
# ・セキュリティグループ
# ・ElasticIP
# ・キーペア
# ・ロードバランサー
# ・ターゲットグループ

# ◯Route53
# ・ホストゾーン

# ◯RDS
# ・データベース（インスタンス）
# ・スナップショット
# ・サブネットグループ
# ・パラメータグループ
# ・オプショングループ

# ◯S3
# ・バケット

# ◯CloudFront
# ・Distributions

# ◯CloudWatch
# ・アラーム（請求、EC2 CPUUtilization）

# ◯IAM
# ・グループ
# ・ユーザー
# ・ロール
# ・ポリシー

# ----------------

#? 使用したサービスのうち料金のかかるサービス

# ◯CloudTrail

# ◯EC2
# ・インスタンス
# ・AMI
# ・ElasticIP
# ・ロードバランサー

# ◯RDS
# ・データベース（インスタンス）
# ・スナップショット

# ◯S3
# ・バケット

# ◯CloudFront
# ・Distributions

# ◯Route 53
# ・ホストゾーン

# ◯SNS
# ・トピック

# ◯ドメイン!お名前.comで更新しないように設定

# **** ネットワーク ****

#& AWS ① VPC作成手順 [ネットワーク]

# IAMユーザでログイン
# ↓
# VPC検索
# ↓
# リレージョン変更(バージニア北部から東京)
# ※大阪リージョンはまだまだ機能が少ない(2021/12/30)
# ↓
# 左側メニューからVPCクリック
# ※AWSではデフォルトでVPCを作成してある
# ↓
# [VPCを作成]をクリック
# ・名前タグ(VPCを識別するための名前を記入)
# - aws-and-infra-vpc
# ・CIDR ブロック
# VPC全体のIPアドレスの範囲をCIDR表記で指定
# - IPv4 CIDR 10.0.0.0/16
# - IPv6 CIDR ブロックなし
# ・テナンシー
# 物理ハードウェアを占有するオプション
# ※これを選択するとEC2の料金が割高になり、特に占有する必要も無い
# - デフォルト
# ↓
# 作成

# ----------------

#& AWS ② サブネット作成手順  [ネットワーク]

# IAMユーザログイン
# ↓
# VPC検索
# ↓
# メニュー サブネット
# ※デフォルトで作成されている
# ↓
# [サブネットを作成]
# ・VPC ID
# - 作成したVPCを選択
# ・サブネット名
# - aws-and-infra-public-subnet-1a
# - aws-and-infra-private-subnet-1a
# ・アベイラビリティーゾーン
# - 1a
# ・IPv4 CIDR ブロック
# - 10.0.10.0/24
# - 10.0.20.0/24
# ↓
# [サブネットを作成]

# ----------------

#& AWS ③ ルーティングの設定手順  [ネットワーク]

# ⑴インターネットゲートウェイを作成し、VPCにアタッチする

# VPC検索
# ↓
# メニュー インターネットゲートウェイ
# ↓
# [インターネットゲートウェイの作成]
# ・名前タグ
# - aws-and-infra-igw
# ↓
# [作成]

# どのVPCにもアタッチしていないので、状態がdetached
# →作成したVPCにくっつける

# ↓
# 作成したIGWを選択
# ↓
# アクション [VPCにアタッチ]
# ↓
# 使用可能なVPC 作成したVPCを選択
# ↓
# アタッチ

# ................

# ⑵ルートテーブルを作成し、パブリックサブネットに紐付ける

# <STEP1: 現状の確認>
# メニュー ルートテーブル
# ↓
# 現状のルートテーブルの確認 rtb-088f83ad978155af4
# - 作成したVPCのルートテーブルを選択
# - [ルート]
# 10.0.0.0/16	local	 アクティブ	いいえ
# →10.0.0.0/16は自身のネットワーク(local)のIPアドレスで、それ以外のIPアドレスは記載されていないから、それ以外のIPアドレスからの通信は破棄される。
# →インターネットに接続するために、ルートテーブルを新規作成してデフォルトルート(ワイルドカード)をIGWに向けるように設定する。


# <STEP2: ルートテーブルの作成>
# [作成]
# ・名前 - オプション
# - aws-and-infra-public-route
# ・VPC 作成したVPCを選択
# ↓
# [作成]

# 今このルートテーブルはVPCに割り当てられているので、それをPublicサブネットにも関連付けしていく。


# <STEP3: サブネットの関連付け>
# ↓
# 作成したルートテーブルを選択
# ↓
# [サブネットの関連付け]
# ↓
# [サブネットの関連付けの編集]
# ↓
# 今回はPublicサブネットをインターネットに接続したいので選択
# ↓
# [保存]
# これでこのルートテーブルをPublicサブネットに割り当てられた。

# 次に、デフォルトルートをインターネットゲートウェイに設定していく。


# <STEP4: デフォルトルートをインターネットゲートウェイに設定>
# ↓
# 作成したルートテーブルを選択
# ↓
# [ルート]
# ↓
# [ルートを編集]
# ↓
# [ルートを追加]
# ・送信先
# - 0.0.0.0/0
# ・ターゲット
# - インターネットゲートウェイ 作成したIGWを選択
# ↓
# [保存]

# 正しく設定できているか確認
# [ルート]
# 10.0.0.0/16	local	 アクティブ	いいえ
# 0.0.0.0/0	igw-0c38d777dff3b2a88	 アクティブ	いいえ

# これでPublicサブネットからインターネットに接続することができるようになった！


# **** Webサーバー(EC2) ****

#& AWS ① EC2インスタンスを設置する [Webサーバー]

# - AMIの選択
# - インスタンスタイプの選択
# - インスタンスの詳細の設定
# - ストレージの追加
# - タグの追加
# - セキュリティグループの設定
# - SSHキーペアの設定

# ................

# EC2と検索
# ↓
# メニュー インスタンス
# ↓
# [インスタンスの作成] ※New EC2 Experience をオフ
# ↓
# クィックスタート → Amazon Linux 2 AMI (HVM) → [選択]
# ※AWSによってメンテナンスされているLinuxでAWSの格サービスと連携するためのツールやライブラリが最初から入っていてすぐに利用できる。
# これにしたいという要件がなければAmazon Linux 2でいい。
# ↓
# t2.micro(無料枠)を選択
# ※パフォーマンスが低いインスタンスタイプ。動作確認では十分。
# ↓
# [インスタンスの詳細の設定]
# ・インスタンス数 : 1
# ※起動するインスタンスの数

# ・購入のオプション : check無し
# ※より安価に利用できるスポットインスタンスにするかどうかについて聞かれている。ここでは常時起動しているインスタンスにしたいのでcheck無し。

# ・ネットワーク : aws-and-infra-vpc
# ※作成したVPCの中に置きたい

# ・サブネット : aws-and-infra-public-subnet-1a
# ※パブリックサブネットの中に置きたい

# ・自動割り当てパブリック IP : 有効
# ※インターネット経由でアクセスできるグローバルIPアドレスを付けるかどうかを選択できる。インターネットからアクセスできるようにしたいので、有効を選択。

# ・配置グループ : check無し
# 複数のEC2インスタンス間の通信を高速化するためのグループ。今回はインスタンスを一つしか作成しないので、check無し。

# ・キャパシティーの予約 :  なし
# ※AWSではアベイラビリティゾーンごとにリソースの上限が決まっていて、それを超えるとEC2インスタンスの起動が出来なくなる。キャパシティ予約をしていると、事前にリソースを確保してくれるので、そういった問題を回避できる。ただキャパシティ予約をしていると、EC2インスタンスの実行の有無に関わらず料金が発生してしまう。今回は特にキャパシティを予約する必要は無いので、なし。

# ・IAM ロール : なし
# ※EC2インスタンスが他のAWSサービスと連携するための権限を設定できる。今回はなし。

# ・シャットダウン動作 : 停止
# ※インスタンスをシャットダウンしたときに起動できるように停止状態で残すか、削除するかを指定できる。今回は削除する必要がない。

# ・終了保護の有効化 : checkなし
# ※インスタンスを終了できないよう保護するかを指定する。誤って終了してしまうことを防ぐためのオプション。本番環境ではこちらはcheckを入れることも多い。今回はcheckなし。

# ・モニタリング : checkなし
# ※インスタンスの監視が通常5分間隔で行われているところ1分間隔にするか指定する。厳密に監視を行う必要は無いのでcheckなし。

# ・テナンシー : 共有
# ※ハードウェアを占有するか共同のハードウェアを利用するかを指定する。ハードウェアを占有する必要は特にない。

# ・Elastic Inference : checkなし
# ※機械学習でGPUを使用する際に、コスト効率をよくするためのもの。機械学習はしないので、checkなし。

# ・クレジット仕様|T2/T3 無制限 checkなし
# ※T2/T3を頭文字に含むインスタンスタイプに関する設定。実はT2/T3系のインスタンスというものには落とし穴がある。例えば今回選択したt2.microだと、CPUが1コアだが、実際にはベースラインという普段はここまで使っていいよというラインがある。サイトにあまりアクセスが来てなくて、CPUの使用率がこのベースラインを下回っていると、CPUクレジットというものが溜まって行く。このベースラインはたったの10%なので普段はCPUを1コアの1/10しか使えていない。そしてサイトにアクセスがたくさん来て、CPU使用率が10%を超えるとバーストモードになって、CPUが100%使えるようになる。バーストモードの間は今まで溜めておいたCPUクレジットを使用する。もしCPUクレジットを使い切ったら、バーストモードが終了して、サーバは過負荷になって、サイトの応答が遅く成ったり応答できなくなってしまう。
# このようにT2インスタンス系には大きな落とし穴がある。
# T2/T3 無制限という設定はバーストモードを無制限にできるようにようになるよ、ただしバーストモード中は料金が発生するよというもの。

# ・ホスト名のタイプ
# ・DNS Hostname
# ・ファイルシステム

#  ネットワークインターフェイス
# ※このインスタンスにパブリックIPだけでなく、プライベートIPアドレスも付けることができる。
# - プライマリID : 10.0.10.10
# ※これを設定する際、パブリックサブネットのIPアドレスの範囲の中にあるものにする。

# 高度な詳細 : 空欄
# ※インスタンスの起動時に実行されるスクリプトを設定できる。

# ↓
# [ストレージの追加]
# ・ボリュームタイプ
# ※タイプがルートになっているものは、OSが入っているストレージ。今回は追加でボリュームを設定する必要は無いので、ルートの設定だけする。
# ※ストレージのボリュームタイプというのは追加時にはEBSかインスタンスストアか選択でき、ルートの場合はAMIの選択時にすでに決まっていて、今回の場合はEBSが選択されている。

# ・デバイス
# ※OSから見えるデバイス名を設定する。これはタイプがEBSかインスタンスストアの場合に設定できて、ルート場合は最初から決まっている。

# ・スナップショット
# ※ストレージの中身となるスナップショットを指定する。こちらはEBSの場合に選択できて、ルートの場合は自動で設定される。

# ・サイズ (GiB) : 8
# ※ボリュームのサイズ。8GiBでいい。

# ・ボリュームタイプ : 汎用SSD
# ※ルートかEBSの場合に選択可能。汎用SSDは価格とパフォーマンスのバランスが取れていて、よく使われるボリュームタイプになる。多くの場合はこちらを選択する。プロビジョンド IOPS SSDはDBなど高いIOが必要な場合に選択する。IOというのはデバイスへの入出力にこと。マグネティクは低いIOでも問題無い場合に使用する。

# ・IOPS
# ※ボリュームタイプがプロビジョンド IOPS SSDの場合に設定できて、そのパフォーマンスを指定する。汎用SSDでは設定できない。

# ・スループット (MB/秒)
# ※1秒間のデータ転送速度。ボリュームタイプによって設定できる。汎用SSDの場合設定できない。

# ・終了時に削除 : check
# ※インスタンスを終了したときにEBSも削除するかを指定。今回は消し忘れによる課金を避けるためにcheck。

# ・暗号化
# ※EBSボリュームの暗号化の設定。今回はなし。

# ↓
# [タグの追加]
# ※インスタンスに付与するタグを設定。
# インスタンスの名前を設定しておく。
# ↓
# [タグの追加]
# キー : Name
# 値 : aws-and-infra-web

# ↓
# [セキュリティグループの設定]
# ※インスタンスへのセキュリティを設定する。
# ↓
# 「新しいセキュリティグループを作成する」を選択
# セキュリティグループ名 : aws-and-infra-web

# ※警告について。デフォルトのセキュリティグループではSSHでどこからでも接続できるように構成されているが、それはとても危険だよという警告。
# ※SSHは、サーバにログインして操作するときに使用する。より安全に使用するにはSSH接続できるIPを設定する。自宅やオフィスなどのIPアドレスを制限して、他の場所からSSHできないようにする。
# 今回は0.0.0.0/0のままにしておく。

# ↓
# [確認と使用]
# ↓
# [起動]
# ↓
# [キーペアの指定画面]
# ※インスタンスにログインするための鍵。これがないとインスタンスにログインできないので、キーペアを作成する。
# ・新しいキーペアの作成
# ・キーペア名 : aws-and-infra-ssh-key
# ↓
# [キーペアのダウンロード]
# → finderに保存 ※絶対に無くさないように！
# ↓
# [インスタンスの作成]
# ↓
# [インスタンスの表示]
# ・ステータスチェック
# ※起動したインスタンスへネットワークの疎通ができているかをチェックする。「初期化しています」から「2/2」となったらインスタンスと正しく通信できていることが確認できる。

# ----------------

#& AWS ② SSHでEC2インスタンスに接続しよう（Mac）[Webサーバー]

# ターミナル起動
# ↓
# (chmod 600 ~/Desktop/aws-and-infra-ssh-key.pem)
# chmod 600 ~/Documents/pem/aws-and-infra-ssh-key.pem
# ※サーバに入るときときに使用する秘密鍵をオーナー以外に使えないように読み書き権限を厳しくしている。これをしないとAWSのEC2にログインすることはできない。
# ↓
# MCにログイン
# ↓
# EC2 検索
# ↓
# メニュ インスタンス
# ↓
# 作成したEC2インスタンスを選択
# ↓
# IPv4 パブリック IP
# 18.182.64.184
# をコピー
# ※これがパブリックIPアドレスになる。インターネットから接続できる用のIPアドレス。このアドレスに対してSSHでログインしていく。
# ↓
# ターミナルに戻る
# ↓

# ssh -i ~/Desktop/aws-and-infra-ssh-key.pem ec2-user@<PublicIPアドレス>

# ※sshコマンドがSSH接続するためのコマンド。オプションiで指定しているのが秘密鍵(pemファイルのパス)。ec2-user@<PublicIPアドレス>がサーバにログインするためのユーザ名。サーバにログインするときはどのユーザ名でログインするか指定する必要がある。EC2にログインするときはec2-userというのを指定してログインしていく。@以降はパブリックIPアドレス。

# →aws-and-infra-ssh-key.pemという秘密鍵を用いて、ec2-userというユーザ名で指定のパブリックIPアドレスに接続するという意味

# ssh -i ~/Documents/pem/aws-and-infra-ssh-key.pem ec2-user@18.182.64.184

# yes

# Warning: Permanently added '18.182.64.184' (ECDSA) to the list of known hosts.

#        __|  __|_  )
#        _|  (     /   Amazon Linux 2 AMI
#       ___|\___|___|

# https://aws.amazon.com/amazon-linux-2/
# 8 package(s) needed for security, out of 16 available
# Run "sudo yum update" to apply all updates.
# [ec2-user@ip-10-0-10-10 ~]$

# exit
# ※サーバ上で誤ってコマンドを打つと大変なことになってしまうので、作業が終わったらサーバとの接続を切っておく。

# ----------------

#& AWS ③ サーバに接続してポート番号を確認する [Webサーバー]

# MCにログイン
# ↓
# EC2 検索
# ↓
# メニュー インスタンス

#! ※EC2インスタンスの場合、サーバを再起動するとこのパブリックIPアドレスが変わってしまう。

# ↓
# ターミナルでSSH接続

# ssh -i ~/Documents/pem/aws-and-infra-ssh-key.pem ec2-user@18.182.64.184

# sudo lsof -i -n -P

# ※lsofコマンドはどのポート番号でどのプログラムが待ち受けているかを知るためのコマンド。
# -iはネットワークソケットファイルを表示するオプションで、サーバの待機ポートとプロセスを一覧にして表示する。
# -nはIPアドレスをホスト名に変換しないオプション。
# -Pはポート番号をサービス名に変換しないオプション。
# これでどのプログラムがどのポート番号で待ち受けているかを知ることができる。

# (LISTEN)と書かれているものが、他のコンピュータから待ち受けているポート。
# (ESTABLISHED)と書かれているものが、相手と現在通信中のポート。



# sshd     3145     root    3u  IPv4  19083      0t0  TCP *:22 (LISTEN)
# →sshdというプログラムが22番ポートで待ち受けているよということになる。
# →*:はどのIPアドレスでも接続元として受け付けるという意味。


# sshd     3145     root    4u  IPv6  19092      0t0  TCP *:22 (LISTEN)


# sshd     2513 ec2-user    3u  IPv4  78247      0t0  TCP 10.0.10.10:22->112.71.145.138:60764 (ESTABLISHED)


# このようにsshdが22番ポートで待ち受けているので自分のパソコンからSSH接続できる。

# ----------------

#& AWS ④ Apacheをインストール [Webサーバー]

# ターミナルでSSH接続
# ssh -i ~/Documents/pem/aws-and-infra-ssh-key.pem ec2-user@18.182.64.184
# ↓
# yumでアップデート
# ※こちらiPhoneのアップデートみたいなもので、EC2インスタンスのライブラリをアップデートする。

# sudo yum update -y

# ※yumはLinuxのパッケージ管理ツール。LinuxはサーバのOS。サーバには色々なライブラリが動いているが、この場合はパッケージと呼ぶ。それらをインストールしたりアンインストールしたりするときに使うのがyumというツール。
# yum updateと入力すると、yumで管理されているパッケージがアップデートされる。最新版にしておくということ。
# sudoというのはroot権限で実行するということ。通常はec2-userで作業している(ログイン時に指定した)が、yumなどの作業はec2-userの権限では行うことができない。そのようなコマンドを実行する場合は、sudoと最初につけることで、root権限でコマンドを実行できる。
# -yはyesを意味するオプション。これをつけないとインタラクティブモードになってめんどくさい。

# ↓
# Apacheのインストール
# sudo yum install -y httpd

# ※httpdというのがApacheを構成する実行ファイル。

# ↓
# Apacheの起動
# sudo systemctl start httpd.service

# ※systemctlコマンドは指定したサービスを起動したり、停止したり再起動したりするコマンド。

# ↓
# 起動したか確認
# sudo systemctl status httpd.service

# Active: active (running)

# ↓
# プロセスで起動確認
# ※プロセスとはサーバ上で実行中のプログラムのこと。実行中のプロセスを表示すると、Apacheはhttpdというファイルが実行コマンドなので、起動中であればhttpdというプロセスが表示される。

# ps -axu
# ps -axu | grep httpd

# ※psコマンドが、Linux上で実行しているプロセスを表示するコマンド。
# -axuは、axというのが全てのプロセスを表示するという意味で、uがCPUやメモリ使用率を合わせて表示するという意味になる。
# なので、全てのプロセスをCPUやメモリの使用率付きで表示するという意味。

# ※|(パイプ)は左側のコマンドの出力結果を右側のコマンドに渡したいときに使うもの。パイプラインはコマンドの結果を次のコマンドで使いたいときに使う。
# ※grepは検索して表示するコマンド。今回の場合ps -axuの出力結果の中からから、httpdという文字を検索して、httpdが含まれている行だけを表示している。

# /usr/sbin/httpd -DFOREGROUND
# これがあればApacheが起動しているということになる。


# ↓
# Apacheが自動起動できるようにする
# ※今の状態だと、サーバが停止したり、再起動したりするとApacheも停止してしまう。また起動コマンドを打ち直す必要がある。
# そこでサーバが起動するときにApacheも起動するように設定しておく。
# sudo systemctl enable httpd.service

# Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.
# ↓
# 自動起動できるか確認
# sudo systemctl is-enabled httpd.service
# enabled

# ----------------

#& AWS ⑤ ファイアウォールを設定 [Webサーバー]

# - セキュリティグループのポート80番(HTTP)を開ける

# ................

# 今の状態でWebサーバへHTTPアクセスした場合どうなるか確認
# →Webサーバはリクエストを返さず、アクセスできない

# MCにログイン
# ↓
# EC2
# ↓
# インスタンス
# ↓
# パブリックIPコピー
# ↓
# URLに貼り付け

# 全然応答が無くるくるする。最終的にエラーが表示される。
# これはなぜかというと、
# MC->EC2->インスタンス->セキュリティグループ

# セキュリティグループ
# aws-and-infra-web. インバウンドルールの表示. アウトバウンドルールの表示

# ※これはこのEC2インスタンスに対して、aws-and-infra-webというセキュリティグループが設定されているということを示す。

# ↓
# aws-and-infra-webをクリック
# ※このセキュリティグループが表示される

# ↓
# [インバウンドルール]


# Name : -
# セキュリティグループルール ID :  sgr-0bc930639b15d14f6
# IP バージョン : IPv4
# タイプ : SSH
# プロトコル : TCP
# ポート範囲 : 22
# ソース : 0.0.0.0/0
# 説明 : -

# ※SSHでポート番号が22番であれば、どんなIPアドレスからでも接続できるという風に書かれている。
# これは逆に言うと、SSH以外ではWebサーバにアクセスできないように設定されているということ。
# これがWebサーバがレスポンスを返さなかった理由。

# #

# HTTPアクセスしても接続できるように設定する

# [インバウンドのルールを編集]
# ↓
# [ルールを追加]
# タイプ : HTTP
# ソース : 任意の場所| Anywhere - IPv4

# ※これで誰でもHTTPアクセスできるようにように指定

# ↓
# [ルールを保存]

# これでWebサーバにHTTPアクセスするとサーバと接続してサーバがレスポンスを返すようになった。

# ↓
# もう一度ブラウザからアクセス
# ↓
# Test Page(Apacheのデフォルトページ)表示
# ※Apacheに接続して、サーバの方がレスポンスを返せた

# ----------------

#& AWS ⑥ Elastic IPアドレスでIPアドレスを固定 [Webサーバー]

# パブリックIPアドレスを固定するElastic IPアドレス：

# 前提：

# EC2インスタンスのパブリックIPは、起動・停止すると別のIPアドレスが割り当てられる。
# Elastic IPアドレスを使用すると、IPアドレスを固定できる。

# 【現状】

# [VPC]--------[IGW]--------
# :
# : [Publicサブネット]
# :        🧱                   (停止前) 54.250.87.160
# : Webサーバ                 ⬇️動的に変わる！
# :                               (再起動後) 13.231.51.166


# 【Elastic IPアドレス】

# ・インターネット経由でアクセス可能な固定グローバルIPアドレスを取得でき、インスタンスに付与できるサービス
# ・そのインスタンスを削除するまでは、ずっとそのIPアドレスを使用することができる

#! 🚨・Elastic IPアドレスは、EC2インスタンスに関連付けられていて、そのインスタンスが起動中であれば無料。逆に、そうでないと課金される。
# →EC2インスタンスを使用しないときはElastic IPアドレスを解放する

# ................

# 作業内容：

# [VPC]-----[IGW]
# :
# : ---[PubS]--------
# : :
# : : 「Elastic IPアドレスを起動したEC2インスタンスに紐づける」🧱
# : :
#     ⬆️
#     🌐

# ................

# MC
# ↓
# EC2
# ↓
# Elastic IP
# ※Elastic IPの確保
# ↓
# [アドレスを割り当てる]
# ↓
# [割り当て]

# 割り当てられた IPv4 : 35.76.43.191


# ................

# EC2インスタンスに割り当てていく
# ↓
# [アクション] → アドレスの関連付け
# リソースタイプ : インスタンス
# インスタンス : 作成したインスタンス
# プライベート IP アドレス : 作成したインスタンスのPrivate IPアドレス

# 再関連付け : check無し
# ※すでにElastic IPが関連付けられているときのオプション

# ↓
# [関連づける]
# Elastic IP アドレスが正常に関連付けられました。
# Elastic IP アドレス 35.76.43.191 はインスタンス i-0e99000eb739989a1 に関連付けられています

# ↓
# 35.76.43.191をURLに貼り付け
# ↓
# Test Page表示

# ................

#! 🚨Elastic IP アドレスはインスタンスに紐づいていないと課金されてしまう。そのためインスタンスに紐づけていない時とか、インスタンスを停止した場合は、Elastic IPのアクションから

# [アクション]
# ↓
# [アドレスの関連付けの解除]をクリック
# ↓
# [アドレスの解放]をクリック

# こうするとお金がかからない。


# **** ドメイン ****

#& AWS ①ドメインを購入 [ドメイン]

# お名前.com で検索
# ↓
# 「その他の格安ドメインを検索」 をクリック
# ↓
# お名前.comに登録されている全てのドメインが表示
# ↓
# 全チェックを外す
# ↓
# 安いドメインを複数選ぶ
# ↓
# 登録したいドメイン名で検索し選択
# ↓
# 料金確認へ進む
# ↓
# お申し込み内容
# ↓
# - 登録年数：1年登録
# - Whois情報公開代行メール転送オプション

# ※Whois情報とは、ドメインは持ち主の名前や連絡先、住所といったものを公開しなければいけない決まりになっている。このWhois情報は正確に登録しなければいけないような決まりになっていて、なぜかと言うと、トラブルが発生したときにドメインの持ち主とコンタクトが取れるようにするため。
# どういうことかと言うと、例えばあなたが持っているドメインが他の会社の商標と被ってしまったとする。そのためその会社からそのドメインは弊社に商標だ、扱うのをやめてくれとあなたに連絡したいとする。その際ドメインの持ち主というのが公開されていないと、商標登録している会社は連絡することができない。
# なのでこのように持ち主の情報を公開されていれば、利用者同士が相互に連絡を取り合って解決することができる。
# そのため、このWhois情報をきちんと正しく登録しないといけない。
# Whois情報は登録するとレジストリの方に連絡がいって、レジストリの方でインターネットに公開するという作業なされる。
# もしこのWhois情報に登録しなかったりとか嘘の情報を登録すると、ドメインの登録を消される場合があるので、正しいものを登録するようにする。
# しかし、このWhois情報、自分の情報をインターネットに晒すのが嫌という方も多いので、Whois情報公開代行というものがある。
# お名前.comではWhois情報公開代行が時期によってはオプションになっていることも。

# - Whois情報公開代行メール転送オプション：チェックなし
# 公開したWhois情報のメールアドレスも公開代行しておくと、個人のメールアドレスではなく、お名前.comのメールアドレスになる。そちらのメールアドレスから転送してくれるオプション。チェックがおすすめ。

# - ドメインプロテクション：チェックなし
# 管理画面上の各種設定を制限することができる。そうすることでドメインのセキュリティを高める。

# - サーバー選択：AWSを使っているので、利用しない

# ↓
# 会員登録 or ログイン
# ※お名前IDはコピーしておく。

#! 🚨ドメインの自動更新のoffにする
# https://www.onamae.com/guide/p/19
# ドメインの設定
# ↓
# ログイン
# - お名前ID:35797825
# - パスワード
# ↓
# ドメイン設定
# ↓
# ドメイン自動更新設定
# ↓
# デフォルトでは自動更新設定が、設定済みになっている
# チェックを入れて確認画面へ進む
# ↓
# 規約に同意し申し込む
# ↓
# 解除完了

# ※ビジネスの場でも自動更新設定はoffにしておいた方がいい。ドメインは毎年一年ごとに更新されるが、クレジットカードは基本的に有効期限が5年。すると、会社でドメインを申し込んだとして、ドメインを申し込むときに個人のクレジットカードで申し込んでしまったと、でその人が転職してしまった場合、するとドメインは毎年更新されていくが、クレジットカードの期限が5年たった段階で切れるのでそうするとドメインのお金の支払いが出来なくなる。お金の支払いができなくても、このお名前.comからお金支払われていないよ支払ってという連絡もその申し込み者のメールアドレスに連絡が行っていて、転職してしまっているから誰も気づけないということがある。
# そうするとドメインの支払いが未払いのためのそのドメインの登録が解除されてしまい。その間に別の人が新たな持ち主になっていたということが起こりうる。
# なので、ここはoffにしておくことで毎年通知が来るので、そこで毎年更新していくというのがおすすめ。

# ................

#^ ※補足：今表示されているのは一年目の料金。購入する前に2年目以降の料金も確認しておく。

# トップページ
# ↓
# 料金一覧
# https://www.onamae.com/service/d-price/?btn_id=commonfooter_d-price

# ----------------

#& AWS ② Route 53でDNSを設定 [ドメイン]

# Route53
# ↓
# DNS管理 ホストゾーンの作成 クリック
# ↓
# ホストゾーン作成ページ表示
#  ※Route53ではホストゾーンを作成し、その中にレコードセットを登録することでドメイン名とIPアドレスの紐付け等を登録していく。
# ↓
# ドメイン名: 購入したドメイン名 aws-and-infra-hashiudo.com
# コメント: 特になしでOK
# タイプ: パブリックホストゾーン
# ※パブリックホストゾーンはインターネットからそのドメインにアクセスする場合はこちらのパブリックホストゾーンを選択する。
# ※プライベートホストゾーンは、AWSのVPC内でルーティングする際にIPアドレスじゃなくて、ドメイン名を使用したいときに選択するもの。今回はインターネットからアクセスできるようにしたいので、パブリックホストゾーンを選択。

# ↓
# ホストゾーンの作成
# ↓
# ホストゾーン作成完了
# ※ホストゾーンが作成されると、NSレコードとSOAレコードがデフォルトで登録されている。

# aws-and-infra-hashiudo.com	NS
# aws-and-infra-hashiudo.com	SOA


#^ ※NSレコードとは、そのドメインを管理するネームサーバーとの紐付けで、SOAレコートとは、そのドメインのゾーンの管理情報になる。

#^ ※特にNSレコードに注目してしていただきたくて、NSレコードにチェックすると、値のところにaws-and-infra-hashiudo.comに紐付くネームサーバーが4つくらい登録されている。このようにaws-and-infra-hashiudo.comのネームサーバーはこちらの4つのネームサーバーだよとここで登録されている。

# ns-59.awsdns-07.com.
# ns-616.awsdns-13.net.
# ns-1417.awsdns-49.org.
# ns-1537.awsdns-00.co.uk.

# ................

# ここまで、aws-and-infra-hashiudo.comのネームサーバーがRoute53になった気がするが、まだなっていない！

# 実際にコマンドを打ちながらaws-and-infra-hashiudo.comのネームサーバーを確認する。

# ⑴EC2を起動させる
# EC2
# ↓
# インスタンス
# ↓
# アクション
# ↓
# インスタンスの状態
# ↓
# 開始

# ⑵Elastic IPを割り当ててEC2に紐付ける
# Elastic IP
# ↓
# Elastic IP アドレスを割り当てる
# ↓
# 割り当て
# ↓
# アクション
# ↓
# Elastic IP アドレスの関連付け
# インスタンス: 割り当てるEC2インスタンスを選択
# プライベート IP アドレス: そのプライベート IPを選択
# ↓
# 関連付け
# ↓
# インスタンスに行って確認
# ・インスタンス:  i-0e99000eb739989a1 (aws-and-infra-web)Elastic IP: 54.249.105.88
# ・パブリックIPがElastic IPと一致しているか確認
# ↓
# Elastic IP = パブリックIPをコピー: 54.249.105.88

# ⑶EC2にログインする
# ターミナル
# ↓
# ssh -i 秘密鍵のパス ec2-user@Elastic IP
# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.249.105.88

# ⑷aws-and-infra-hashiudo.comのネームサーバーを確認する
# digコマンドで確認する
# ↓
# dig ドメイン名 NS +short

#^ ※digというのはドメインに紐付くIPアドレスなどの情報やIPアドレスに紐付くドメインを調べたいときに使用するコマンド。
# ネームサーバーを知りたいときは、NSを指定する。
# digコマンドは色々な情報が表示されるので、シンプルにネームサーバーだけを知りたい場合は、+short というオプションを入れる。

# $ dig aws-and-infra-hashiudo.com NS +short
# dns2.onamae.com.
# dns1.onamae.com.

# 実行するとこのように、お名前.comのネームサーバーが表示される。
# なぜお名前.comのネームサーバーが表示されるのかと言うと、これはaws-and-infra-hashiudo.comというゾーンがお名前.comのネームサーバーに委任されているから。
# どう言うことかと言うと、comというネームサーバーにaws-and-infra-hashiudo.comのIPアドレスを教えてと問い合わせがあった時に、comのネームサーバーはお名前.comのネームサーバーが知っているよと返答している。
# これはお名前.comでドメインを購入した際にお名前.comではそのドメインのネームサーバーをデフォルトで今表示されているふたつのネームサーバーで登録してその情報をレジストリつまるcomのネームサーバーに報告しているから。
# というわけでネームサーバーをRoute53に変更したければ、お名前.comの管理画面でゾーンはお名前.comにあるよという今の設定をゾーンはRoute53にあるよと設定を変更する必要がある。
# そうすると、お名前.com経由でレジストリであるcomのネームサーバーにもaws-and-infra-hashiudo.comのゾーンはRoute53なんだとそのように登録される。

# ⑸ ネームサーバーをお名前.comからRoute53に変更
# お名前.com
# ↓
# ログイン
# ↓
# ドメイン機能一覧
# ↓
# ネームサーバーの変更
# ↓
# 変更したいドメインにチェック
# ↓
# その他のサービス
# ↓
# その他のネームサーバーを使うにチェック
# ↓
# フォームに、AWS Route53で作成したホストゾーンのネームサーバーを貼り付ける

# ns-59.awsdns-07.com.
# ns-616.awsdns-13.net.
# ns-1417.awsdns-49.org.
# ns-1537.awsdns-00.co.uk.

# ※ 最後の'.'はいらない

# ↓
# 確認
# ↓
# OK

#^ ※この設定が反映されるにはしばらく時間がかかる。
# 24時間~72時間
# 設定が反映されれば、digコマンドで確認できる。

# ⑹ ドメイン名にEC2インスタンスのIPアドレスを紐付ける

# やることは、Route53にドメインとEC2インスタンスのIPアドレスを紐付けるAレコードの登録。

# Aレコードを追加する
# Route53
# ↓
# ホストゾーン
# ↓
# 対象のドメインをクリック
# ↓
# レコードを作成
# レコード名: 空
#^ ※aws-and-infra-hashiudo.comのままでアクセスしたいから
# ・レコードタイプ: A
# ・エイリアス: オフ
#^ ※エイリアスはIPアドレスの代わりにAWS専用の名前でどこに紐付けるかを指定するオプション。
# 今回は使用しない。
# ・TTL: そのまま
#^ ※TTLはフルリゾルバにドメイン名とIPアドレスの紐付けデータをキャッシュしておく秒数。
# デフォルトで300秒 = 5分が入っていてこのままでOK
# ・値: Elastic IP = パブリックIPを入力 54.249.105.88
#^ ※IPアドレスを入力する
# ・ルーティングポリシー: シンプル
#^ ※ルーティングポリシーはそもそもサーバーが一台しかないので、シンプルでOK
# ↓
# レコードを作成
# これでAレコードを登録できた。
# aws-and-infra-hashiudo.com	A


# これでしばらく時間たって、ドメインのネームサーバーの変更が反映されたら、ドメイン名をブラウザに入力するとAレコードで登録したIPアドレスが返されて、Webサーバーに接続できるようになる。

# ⑺ digコマンドでドメインのネームサーバーを確認
#^ ※ そんなに時間かからなかった １時間以内。

# $ dig aws-and-infra-hashiudo.com NS +short
# ns-1537.awsdns-00.co.uk.
# ns-59.awsdns-07.com.
# ns-616.awsdns-13.net.
# ns-1417.awsdns-49.org.

# これでRoute53のネームサーバーになっている。

# ⑻ Webブラウザでドメインを使ってアクセス。
# aws-and-infra-hashiudo.com

# Apacheが表示された。


# **** DBサーバー ****

#& AWS ① プライベートサブネットを作成 [DBサーバー]

# VPC
# ↓
# サブネット
# 現状:
# aws-and-infra-public-subnet-1a 	ap-northeast-1a
# aws-and-infra-private-subnet-1a      ap-northeast-1a
#^ ※ 1aとは異なるAZにサブネットを作成する
# ↓
# サブネットの作成
# ↓
# VPC ID: aws-and-infra-vpc
# サブネット名: aws-and-infra-private-subnet-1c
# アベイラビリティーゾーン: 1c
# IPv4 CIDR ブロック: 10.0.21.0/24
# ↓
# サブネットを作成

# ----------------

#& AWS ② RDSの作成準備 [DBサーバー]

# RDSの作成準備
# - セキュリティグループの作成 (EC2)
# - DBサブネットグループの作成
# - DBパラメータグループの作成
# - DBオプショングループの作成

# ................

# EC2
# ↓
# セキュリティグループ
# ↓
# セキュリティグループを作成
# ↓
# セキュリティグループ名: aws-and-infra-db
# 説明: aws-and-infra-db
# VPC: vpc-0a8d4acc30df3f6c0 (作成したVPC)
# ↓
# インバウンドルール ルールを追加
#^ ※WebサーバーからだけMySQLでDBに接続できるようにする

# タイプ: MySQL/Aurora ※これでMySQLからの接続を許可するようになる

# プロトコル: TCP
# ポート範囲: 3306

# ソース: カスタム sg-0e315b3b75455bfff
#^ ※今回はWebサーバーを指定する。Webサーバーを指定する際、Webサーバーの個別のIPアドレスを指定することもできるが、サーバーを複数台運用すると、個別に指定しないといけない。そこでソースにはセキュリティグループも指定できるので、aws-and-infra-webを指定する。するとそのセキュリティグループ内ののインスタンス、つまりWebサーバーのインスタンスが接続できるようになる。

# ↓
# セキュリティグループを作成

# ................

# RDS
# ↓
# サブネットグループ
#^ ※RDSインスタンスを起動するとき、DBサブネットグループというものを指定する。
# DBサブネットグループとは、VPC内にあるサブネットを複数指定してRDSインスタンスが起動するサブネットを指定した設定になる。
# これはマルチAZで複数のサブネットを使用する関係で、RDSを作成するときは、こちらのDBサブネットグループを作成する必要がある。
# ↓
# DBサブネットグループを作成
# ↓
# 名前: aws-and-infra-subnet-group
# 説明: aws-and-infra-subnet-group
# VPC: aws-and-infra-vpc
# ↓
# サブネットの追加
#^ ※RDSで使用するサブネットを追加

# アベイラビリティーゾーン: 1a
# サブネット: subnet-0576b7ed0d377c44a	10.0.20.0/24

# アベイラビリティーゾーン: 1c
# サブネット: subnet-0b67c2c1f03347073	10.0.21.0/24

#^ ※プライベートサブネットを選択
# ↓
# アベイラビリティーゾーン　サブネット ID　CIDR ブロック
# ap-northeast-1a	subnet-0576b7ed0d377c44a	10.0.20.0/24
# ap-northeast-1c	subnet-0b67c2c1f03347073	10.0.21.0/24
# ↓
# 作成
# サブネットグループが作成された

#^ ※ RDSを作成する際にこちらのサブネットグループを指定すると、このサブネットグループで指定した二つのプライベートサブネットの中でRDSインスタンスが作成される。

# ................

# パラメータグループ
#^ ※DBパラメータグループというのは、RDSではDBの設定ファイルを直接編集できないので、代わりにDBの設定値を指定するもの。
# ↓
# パラメータグループを作成
# ↓
# パラメータグループファミリー: mysql8.0
#^ ※DBエンジンのバージョンを指定。今回はMySQL 8.0
# グループ名: aws-and-infra-mysql80
# 説明: aws-and-infra-mysql80

# ↓
# 作成

# ................

# パラメータを変更したい場合

# チェック
# ↓
# パラメータグループアクション
# ↓
# 編集

# 変更可能:
# trueになっているものが変更可能な項目で、falseになっているものは変更できない。

# 適用タイプ:
# staticとdynamicの二つの値が存在する。これはDBパラメータを変更したときに、staticだとRDSインスタンスの起動後に設定が反映されるのか、それともdynamicだとRDSインスタンスに設定が動的に反映されるのかを表している。

# 変更したら、変更の保存ボタンをクリック。

# ................

# オプショングループ
#^ ※オプショングループはDBの機能的な部分を設定する。
# たとえば、プラグインを使いたいとか。
# ↓
# グループの作成
# ↓
# 名前: aws-and-infra-mysql80
# 説明: aws-and-infra-mysql80
# エンジン: mysql ※今回はmysql
# メジャーエンジンバージョン: 8.0
# ↓
# 作成

#^ ※作成すると、デフォルトのグループも作成される。しかし今回は自分で作成したものを使用する。
#^ これはなぜかと言うと、後々オプショングループの値を変更したい場合にデフォルトのグループを変更するのではなく、自分で作成したものを変更するのがセオリーだから。


# ----------------

#& AWS ③ RDSの作成 [DBサーバー]

# RDSの作成
# - DBエンジン
# - 本番環境
# - DB詳細の指定
# - [詳細設定]の設定

# ................

# RDS
# ↓
# データベースの作成
# ↓
# エンジンのオプション: MySQL
# バージョン: 8系の最新版
# ↓
# テンプレート: 開発/テスト
#^ ※本番環境でやるときは、本番稼働用を選ぶのがいいが、こちらを選ぶと料金が高くなってしまう。
#^ 料金のことだけを考えれば、無料利用枠すればいいが、そうすると設定できる項目が一部制限されてしまう。
# ↓
# 設定
# DB インスタンス識別子: aws-and-infra-web
#^ ※DB インスタンス識別子とはRDSインスタンスの名前
# 認証情報の設定:
# - マスターユーザー名: root
# - マスターパスワード: password
#^ ※本当は自動生成した方が安全

# ↓
# DB インスタンスクラス: バースト可能クラス db.t3.micro
#^ ※DB インスタンスクラスは通常だと、本番要だと標準クラスから選ぶのが良い。しかし今回学習用なので、なるべく安いやつ、バースト可能クラスdb.t3.microを選択。

# ↓
# ストレージ
# ストレージタイプ: 汎用 (SSD)
# ストレージ割り当て: 20 このままでOK

# ストレージの自動スケーリング: 無効
#^ ※こちらDBへの負荷がかかるとDBのストレージを自動で容量を増やすかのオプションになる。
#^ 今回は負荷が来ることはないので、無効でOK。

# ↓
# 可用性と耐久性: 単一の DB インスタンス
#^ ※マルチAZにするか決める。チェックを入れるだけでマルチAZにできるが、マルチAZにした方が冗長性が上がるが一方で料金もだいぶ上がってしまうので、スタンバイインスタンスを作成しないようにして、マルチAZに対応しないようにする。

# ↓
# 接続
# Virtual Private Cloud (VPC): 自作したVPC
# サブネットグループ: aws-and-infra-subnet-group　自作したもの

# パブリックアクセス: なし
#^ ※VPCの外からRDSに接続することがあるのかという話。今回はVPCの外からはRDSにアクセスできないようにしたいので、そういう風にすることでRDSのセキュリティを高めていきたい。

# VPC セキュリティグループ:
# - 既存の選択
# - 既存の VPC セキュリティグループ: aws-and-infra-db
# - アベイラビリティーゾーン: 1a
# - データベースポート: 3306

# ↓
# 追加設定
# 最初のデータベース名: 空
#^ ※ RDSインスタンスを作成した後にDBを自分の手で作っていくので、いらない
# DB パラメータグループ: aws-and-infra-mysql80 自作したもの
# オプショングループ:  aws-and-infra-mysql80 自作したもの

# バックアップ:
# - 自動バックアップを有効にします: チェック
#^ ※ チェックを入れておくと毎日RDSがバックアップを取ってくれる。
# - バックアップ保持期間: 30日間
#^ ※ 長い方がいい
# - バックアップウィンドウ: 選択ウィンドウ
# -- 開始時間: 19:00 UTC
# -- 期間: 0.5時間
#^ ※バックアップウィンドウは自動バックアップの開始時間を指定する。何時からスナップショットを撮るかという話。
# 時間はUTCで指定する。日本時間から9時間引くとUTCになる。
# 例えば、朝の4時にスナップショットを撮りたいなら、その9時間前である19時を指定する。
# 期間はどのくらいの時間でスナップショットを撮るかを指定。ここでは30分ということで、0.5時間を指定。

# - スナップショットにタグをコピー: チェック

# 暗号化:
# 暗号を有効化: 無効化

# ↓
# モニタリング
#^ 💰拡張モニタリングの有効化: 無効
#^ ※拡張モニタリングでは通常モニタリングに加えてさらに詳しい情報をモニタリングするためのオプション。
#^ 今回は無効にするが、より詳しい情報を見たいときは有料になるが有効しておく。

# ↓
# ログのエクスポート: チェック無し
#^ ※ CloudWatch Logsにこちらに記載されているログを出力したいシーンがあればチェックを入れる。今回は無し。

# ↓
# メンテナンス
# マイナーバージョン自動アップグレードの有効化: チェック
#^ ※これはMySQLの新しいマイナーバージョンがリリースされた時に自動でアップグレードするかどうかのオプション。

# メンテナンスウィンドウ: 選択ウィンドウ
#^ ※いつアップグレードを行うかを指定
# - 開始日: 日曜日
# - 開始時間: 20:00 UTC (午前5時)
# - 期間: 0.5時間

# 削除保護
# 削除保護の有効化: チェック無し
#^ ※間違ってDBを削除することが無いように削除できなくする設定。あくまで学習用で時には削除したいので、チェック無し

# ↓

# データベース認証
# データベース認証オプション: パスワード認証
#^ ※IAM db  認証: チェックなし
#^ ※ IAMでDBの認証を行うかという話。今回特に必要がない。
#^ ※ 現行のバージョンにはこの項目がない

# ↓
# 概算月間コスト
# DB インスタンス　18.98 USD
# ストレージ　2.76 USD
# 合計　21.74 USD
#^ ※ 一様無料枠なので流石にここまではかからないと思う。
#^ ※21ドル 2,635.86 円

# ↓
# データベースの作成

# ................

# 詳細の確認

# ステータス
# 作成中

# ステータス
# バックアップ中

# ステータス
# 変更中

# ステータス
# 利用可能

# RDSの画面で表示される内容について

# ・接続とセキュリティ
# こちらは接続情報。エンドポイントであったりVPCの情報が記載されている。
# 設定された内容になっているか確認。
# 特にVPC、サブネットグループ、セキュリティグループ。こちらが思ったのと異なると、次にWebサーバーからRDSへアクセスするがそのアクセスができなくなる。なのでここはしっかりとチェックしておく。

# 設定が違ったら、上の変更ボタンから修正できる。

# ・モニタリング
# CPU 使用率
# 空きストレージ容量
# などがデフォルトで確認できる。
# DBが重いなあと思ったら、こちらでDBの状態をチェックしておく。

# ・ログとイベントタグ
# ログとイベントを確認できる。

# ・設定
# 色々な設定情報を確認できる。
# 設定した通りになっているか確認。
# エンジンバージョン
# 8.0.28
#^ ※間違ってストレージを暗号化してしまった。

# ・メンテナンスとバックアップ
# 重要なのはバックアップとスナップショットの項目。
# 自動バックアップだと毎日毎朝自動でバックアップが取得される。
# それとは別にスナップショットの項目に「スナップショットの取得」というボタンがあり、こちらでは手動でスナップショットを撮ることができる。

#! 💰🚨手動でスナップショットを撮るとそのスナップショットがいつまでも削除されないというところが注意点。
#! 自動バックアップだと30日後には消えるのとRDSインスタンスを削除すると一緒に削除される。
#! 一方で手動で取得したスナップショットはいつまでも消えないし、RDSインスタンスを削除しても削除されない。スナップショットは存在しているとわずかだが料金がかかるので、RDSを削除した際は手動で取得したスナップショットも今後使う用途が無いのであれば削除しておく。

# ・タグ
# インスタンスにつけられているタグを確認できる。

# ................

# RDSインスタンスの停止

# アクション
# ↓
# 停止

#^ 💰RDSは停止すると費用を浮かせることができる。
#^ 🚨ただ、RDSの停止は注意が必要でテスト環境なら停止しても問題ないが、本番環境ではRDSは停止しない方が無難です。なぜかと言うとRDSの場合、停止に時間がかかるということと、起動しようとしたときにAWS側にRDSインスタンスのリソースが余っていないとしばらく起動できないということがある。
#^ そのため本番環境では停止させないことをオススメする。

# ----------------

#& AWS ④ WebサーバーからRDSに接続 [DBサーバー]


# --------[VPC]-----------[IG]---------------------------------------------------
# ||                                                 |                                 10.0.0.0/16
# || ----[Publicサブネット]----      | -----[Privateサブネット] -----------
# ||    10.0.10.0/24                      |                  10.0.20.0/24
# ||              🧱                               |                         🧱
# ||        Webサーバー                  |                  DBサーバー
# || ---------------------------------------     |  -----------------------------------------------
# ||                        ↑                       |
# ||                        ｜                      |         10.0.21.0/24
#                            |
#                          🧱 Route53
#                           ↑
#                           🌐  ｲﾝﾀｰﾈｯﾄ

# ① WebサーバーにMySQLをインストール
# ② WebサーバーからRDSへmysqlコマンドで接続

# ................

# ⑴ Webサーバーにアクセス

# EC2
# ↓
# インスタンス
# ↓
# IPアドレスコピー: 35.78.153.241
# ↓
# ターミナル
# ↓
# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@35.78.153.241

# ................

# ⑵ MySQLのインストール

# sudo yum install -y mysql

# ................

# ⑶ MySQLコマンドで接続
#^ ※DBに接続する際には、DBの接続先情報、エンドポイントと記載された情報が必要になる。

# RDS
# ↓
# データベース
# ↓
# aws-and-infra-webをクリック
# ↓
# エンドポイントをコピー
# aws-and-infra-web.ck1pcw8mc3jp.ap-northeast-1.rds.amazonaws.com
# ↓
# ターミナル
# ↓

# mysql -h aws-and-infra-web.ck1pcw8mc3jp.ap-northeast-1.rds.amazonaws.com -u root -p

#^ ※ MySQLでDBに接続したい場合は、mysqlコマンドを使う。
# -hでエンドポイントを指定。
# -uでログインユーザー名を指定。
# -pでパスワード入力が求められる。
#^ ※コマンドにパスワードを書くと画面にパスワードが表示されてしまうのでこのように書く。

# Welcome to the MariaDB monitor.  Commands end with ; or \g.
# Your MySQL connection id is 20
# Server version: 8.0.28 Source distribution

# Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

# Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

# MySQL [(none)]>

# となれば、WebサーバーからDBサーバーに接続できた。

# ................

#! Access deniedで考えられる原因

# ①DBが利用可能になっていないケース

# ②セキュリティグループの設定が間違っているケース
# RDS
# ↓
# データベース
# ↓
# チェック
# ↓
# 接続とセキュリティ
# ↓
# セキュリティ
# ↓
# VPC セキュリティグループ クリック
# ↓
# インバウンド
# ↓
# ソースのセキュリティグループ

# このセキュリティグループの確認
# ↓
# このセキュリティグループからの接続であればMySQLで接続できるという設定になっている

# EC2インスタンスがこのセキュリティグループに所属しているか確認

# ③ ユーザー名とパスワードが間違っているケース


# **** WordPressの構築 ****

#& AWS ① WordPressのインストールとApacheの設定 [WordPressの構築]

# (0) Webサーバーにssh接続

# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@35.78.153.241

# ................

# ⑴ WordPressを動かすのに必要なライブラリをインストールする。

# sudo amazon-linux-extras install -y php7.4

#^ ※WordPressを動かすためにはPHPが必要だが、現在のEC2にバーションではyumのデフォルトでインストールされるPHPのバージョンが5.4になる。
# sudo yum install -y php
# とすると、PHP5.4がインストールされるわけです。
# しかし、最新のWordPressではPHPのバージョンが5.6以降が必要。
# そこでPHPのより新しいバージョン、今回はPHP7.2をインストールする。
# そのために、通常のyumのインストールコマンドではないく、amazon-linux-extrasというコマンドを使用する。
# OSは、今回はEC2のOSはAmazon Linux 2だが、そちらにはextrasライブラリと呼ばれるパッケージ群が存在する。
# そしてその中にPHPのより新しいバージョンなどが存在していて利用することができる。


# amazon-linux-extras list
# 利用できるパッケージ一覧取得

# amazon-linux-extras info パッケージ名


# amazon-linux-extras list | grep php
#  42  php7.4                   available    [ =stable ]
#  51  php8.0                   available    [ =stable ]

# amazon-linux-extras 使い方
# コマンド

# help (コマンドリスト表示)
# info (特定のパッケージ詳細表示)
# install (特定のトピックを有効化＆インストール)
# list (有効化できるトピック一覧 省略可能)
# enable (特定のトピック有効化 レポジトリに追加だけ)
# disable (特定のトピック無効化 パッケージ削除ではない)
# remove


# AWS EC2 の amazon-linux-extras の話
# https://hapicode.com/server/aws-amazon-linux-extras.html#extras-library-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB

# ................

# ⑵ PHP関連の必要なファイルをyumからインストールする

# sudo yum install -y php php-mbstring

#^ ※先にPHP7.4をextrasライブラリからインストールしておくと、PHP7.4に合ったPHP関連のライブラリをインストールしてくれる。
#^ なので、amazon-linux-extras installコマンドとyum installコマンドというのは必ずこの動画と同じようにamazon-linux-extrasコマンドから実行するようにする。


# amazon-linux-extras info php7.4
# php7.4 recommends php-cli                    # yum install php-cli
# php7.4 recommends php-pdo                    # yum install php-pdo
# php7.4 recommends php-fpm                    # yum install php-fpm
# php7.4 recommends php-json                   # yum install php-json
# php7.4 recommends php-mysqlnd                # yum install php-mysqlnd

# ................

# ⑶ Webサーバーのホームディレクトリに移動する

# cd ~

# ................

# ⑷ WordPressの最新のバージョンをダウンロードする

# wget https://ja.wordpress.org/latest-ja.tar.gz

#^ ※wgetコマンドはURLを指定してファイルをダウンロードするコマンド。
# このURLに最新のWordPressのファイルが置かれている。

# ................

# ⑸ 今ダウンロードしたファイルを確認する

# ls
# latest-ja.tar.gz

# ................

# ⑹ 圧縮されているので、解凍する

# tar xzvf latest-ja.tar.gz

#^ ※tarコマンドは複数のファイルをまとめて圧縮(アーカイブ化)したり、解凍したりするコマンド。
# xzvfというのは、
# xが解凍、
# zがgzipを使用する、
# vが圧縮・解凍状況を表示する、
# fが圧縮または解凍するファイル名を指定する
# オプション。

# まとめると、アーカイブ化されたgzipファイルを解凍するよという意味。

# ................

# ⑺ lsコマンドで解凍したファイルを確認

# ls

# atest-ja.tar.gz  wordpress

# すると、wordpressというディレクトリが作成されている。
# ここにwordpressのファイルが展開されている。

# ................

# ⑻ wordpressディレクトリに移動

# cd wordpress

# ................

# ⑼ wordpressのプログラムをApacheから見える場所に移動させる。

#  ls
# index.php        wp-blog-header.php    wp-includes        wp-settings.php
# license.txt      wp-comments-post.php  wp-links-opml.php  wp-signup.php
# readme.html      wp-config-sample.php  wp-load.php        wp-trackback.php
# wp-activate.php  wp-content            wp-login.php       xmlrpc.php
# wp-admin         wp-cron.php           wp-mail.php

# sudo cp -r * /var/www/html/

#^ ※cpコマンドはコピーするコマンド。
# -r * は現在のディレクトリから全てのファイルとディレクトリを再帰的に指定するオプション。
# /var/www/html/がコピー先のディレクトリのパス。

# こちらのコマンドで、現在のディレクトリ以下にあるwordpressの全てのファイルを/var/www/html/以下にコピーする。

# /var/www/html/がApacheが参照しているディレクトリ。ブラウザからApacheにアクセスが行くと、Apacheは/var/www/html/以下にあるファイルを返す。

# /var/www/html/はデフォルトのドキュメントルート。

# ................

# (10) WordPressのファイルの所有者とグループを変更しておく。

# sudo chown apache:apache /var/www/html/ -R

#^ ※chownコマンドが所有者:所有グループを変更するコマンド。
# apache:apacheと指定しているのが、ファイルの所有者と所有しているグループをapacheに変更するよという意味です。
# /var/www/html/ -Rというのが/var/www/html/以下全てのファイルを対象に変更するという意味。

# つまりこのコマンドで、/var/www/html/以下の全てのファイルの所有者とそのグループをapacheに変更するということになる。

# これで、ApacheからWordPressのファイルを参照できるようになった。

# ................

# (11) この設定をApacheに反映させために、Apacheを再起動させる

# まずはApacheの起動状態を確認する:
# sudo systemctl status httpd.service
# Active: active (running)

# 起動させる:
# sudo systemctl start httpd.service

# 再起動させる:
# sudo systemctl restart httpd.service

# これで、ApacheがWordPressのファイルを参照できるようになった。

# ----------------

#& AWS ② データベース作成とユーザー作成 [WordPressの構築]

# データベースを作成するには、RDSインスタンスにMySQLコマンドで接続してデータベースを作成するコマンドを打っていく。
# なので、まずWebサーバーにsshログインして、mysqlコマンドでDBサーバーに接続する。

# ＊補足
# DBMS → RDS
# データベース → データベース名

# ターミナル
# ↓
# Webサーバーログイン:

# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@35.78.153.241
# ↓
# DBサーバーに接続:

# mysql -h aws-and-infra-web.ck1pcw8mc3jp.ap-northeast-1.rds.amazonaws.com -u root -p

# ................

# ⑴ MySQLの中で、データベースを作成する

# CREATE DATABASE aws_and_infra DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;

# CREATE DATABASE aws_and_infra
# → aws_and_infraという名前でデータベースを作成

#  DEFAULT CHARACTER SET utf8
# → デフォルトの文字コードを指定

# COLLATE utf8_general_ci
# → データベースの照合順序を指定
# → 文字列の比較方法の指定の意味
# → 文字コードはutf8で、言語は多言語を示すgeneral、文字列の比較方法は大文字と小文字が区別されないciを指定する。

# ................

# ⑵ データベースが作成されたか確認

# SHOW DATABASES;

# ................

# ⑶ WordPress用のユーザーを作成する

# CREATE USER 'aws_and_infra'@'%' IDENTIFIED BY 'password';

# CREATE USER 'aws_and_infra'@'%'
# → CREATE USERコマンドでユーザーは作成される。

#  'aws_and_infra'@'%'
# → @以降は接続元のホストを指し示している。
# → %は接続元はどこでもOKという意味。

# IDENTIFIED BY 'password'
# → IDENTIFIED BYで接続時のパスワードを指定。
# → 今回はpasswordにしている。

# ................

# ⑷ 今作成したユーザーにデータベースを操作できる権限を付与する
#^ ※これをしておかないと、WordPressユーザーがデータベース内にテーブルを参照したり、作成したりすることができない。

# GRANT ALL ON aws_and_infra.* TO 'aws_and_infra'@'%';

# GRANT ALL
# → GRANTコマンドがユーザーに権限を付与するコマンド。
# → ALLで全ての権限を付与する

# ON aws_and_infra.*
# →aws_and_infra.*というのは、aws_and_infraデータベースの全てのテーブルを操作できるよという意味

# TO 'aws_and_infra'@'%'
# → その権限を先ほど作成したユーザーに付与している。

# ................

# ⑸ 権限を付与しただけだと、まだMySQLに反映されていない。
# そこで設定を反映させるコマンドを入力する。

# FLUSH PRIVILEGES;

# → このコマンドを打つことで設定が反映される。

# ................

# ⑹ ユーザーが作成されたか確認

# SELECT user, host FROM mysql.user;

# → このコマンドを打つとユーザー一覧が表示される


# +------------------+-----------+
# | user             | host      |
# +------------------+-----------+
# | aws_and_infra    | %         |
# | root             | %         |
# | mysql.infoschema | localhost |
# | mysql.session    | localhost |
# | mysql.sys        | localhost |
# | rdsadmin         | localhost |
# +------------------+-----------+
# 6 rows in set (0.00 sec)

# ................

# ⑺ 作成したユーザーでMySQLに接続できるか確認

# exit; 一旦MySQLからログアウト
# ↓

# ユーザー名を作成したユーザーに変更

# mysql -h aws-and-infra-web.ck1pcw8mc3jp.ap-northeast-1.rds.amazonaws.com -u aws_and_infra -p

# ↓
# password

# ↓
# MySQL [(none)]>

# 無事に接続できた。これでaws_and_infraという今回作成したユーザーでMySQLに接続できることが確認できた。

# ................

# MySQLとEC2からログアウトする。

# MySQLもEC2サーバーももし何か誤ったコマンドを打ってしまうと大事故になってしまう可能性がある。
# そのため、使用しないときは基本的に接続を切断することをオススメする。

# exit;
# ↓
# exit


# ----------------

#& AWS ③ ドメイン名でアクセス、WordPressの設定 [WordPressの構築]

# ⑴ ドメイン名でWebサーバーにアクセス

# aws-and-infra-hashiudo.com

# WordPressの設定画面が開く！

# こちらでDBに接続するための情報を登録していく。
# 具体的には以下の通り。

# WordPress へようこそ。作業を始める前にデータベースに関するいくつかの情報が必要となります。以下の項目を準備してください。

# 1.データベース名
# 2.データベースのユーザー名
# 3.データベースのパスワード
# 4.データベースホスト
# 5.テーブル接頭辞 (1つのデータベースに複数の WordPress を作動させる場合)


# 画面上でこれらの項目を登録すると、実際にはwp-config.phpというファイルが/var/www.html/配下に作成される。

# WordPressはそのファイルに記載されている内容を読み込んで、DBと接続する。

# もし接続情報を更新したい場合は、作成されたwp-config.phpファイルをサーバー上で直接編集すればOK。

# ................

# ⑵「 さあ、始めましょう」ボタンをクリック

# データベース名: aws_and_infra
# ユーザー名: aws_and_infra
# パスワード: password

# データベースのホスト名: aws-and-infra-web.ck1pcw8mc3jp.ap-northeast-1.rds.amazonaws.com
#^ ※RDSのホストつまりRDSの接続先(エンドポイント)
# RDS → データベース → クリック→ 接続とセキュリティ→エンドポイント

# テーブル接頭辞: wp_ このままでOK
#^ ※データベース内にテーブルを作る際に接頭辞として頭に何を付けるかということ。

# ↓
# 送信
# ↓
# この部分のインストールは無事完了しました。WordPress は現在データベースと通信できる状態にあります。準備ができているなら…

# 「インストール実行」

# ................

# ⑶サイトの必要情報を登録

# サイトのタイトル: なんでもOK

# ユーザー名: chako
#^ ※セキュリティ上、他の名前がいい。

# パスワード: XruH-qe/wcYe4
#^ ※パスワード生成ツールが便利

# https://www.luft.co.jp/cgi/randam.php

# メールアドレス: 自分のアドレス

# 検索エンジンでの表示: チェック無し
#^ ※検索エンジンで表示させたいので、チェック無し

# ↓
# 「WordPressをインストール」
# ↓

# 成功しました !
# WordPress をインストールしました。ありがとうございます。それではお楽しみください !

# ユーザー名	chako
# パスワード
# 選択したパスワード。XruH-qe/wcYe4

# 「ログイン」

# ................

# ⑷ ログイン

# ダッシュボード表示された。

# これでWordPressが動くようになった。

# ダッシュボードのURL
# http://aws-and-infra-hashiudo.com/wp-admin/


# 試しにドメイン名でアクセス
# aws-and-infra-hashiudo.com

# ↓
# Hello world!のサンプルページが表示された。


# **** ストレージ ****

#& AWS ① S3バケットの作成、S3アクセス権限を持ったIAMユーザーの作成 [ストレージ]

# ⑴ バケットの作成
# S3
# ↓
# バケット
# ↓
# バケットを作成
# ↓
# 一般的な設定
# バケット名: aws-and-infra-wp-hashiudo
#^ ※グローバルで一意になるように付ける。

# AWS リージョン: アジアパシフィック (東京)
#^ ※アプリケーションと同じリージョンにした方が有利。

# 既存のバケットから設定をコピー - オプション: 空
#^ ※今回は１から作成するので空

# ↓

# バケットのバージョニング
# バケットのバージョニング: 無効
#^ ※同じファイル名のファイルを保存したときに、それぞれのバージョンを保存するかという話。

# ↓

# タグ(0) - オプション
# 空のまま

# ↓

# デフォルトの暗号化
# サーバー側の暗号化: チェック無し
#^ ※すでに保存されているオブジェクトを自動的に暗号化する設定。

# ↓
# ⭐️このバケットのブロックパブリックアクセス設定
# パブリックアクセスをすべて ブロック: オフ

#^※バケットとオブジェクトに外からのアクセスを禁止するための設定。
#^ 外からアクセスされたく無いファイルを置くときはチェックしておくことをオススメする。
#^ 今回はインターネットに配信する画像を置きたいので、設定をすべてオフにする。

#^ ※ここがONだと、この後S3のバケットにWordPressからアクセスできなくなってしまう。

# ↓

# オブジェクトロック: 特に無し

# ↓

# ⭐️オブジェクト所有者
# ACL  有効
# オブジェクトライター: チェック (デフォルト)
#^ ※これをしないと、画像をS3にアップロードして、S3から配信されない

# ↓
# バケットを作成

# aws-and-infra-wp-hashiudo
# アジアパシフィック (東京) ap-northeast-1
# オブジェクトは公開することができます

# ................

# ⑵ S3の権限を持ったIAMの作成

# IAM
# ↓
# ユーザー
# ↓
# ユーザーを追加
# ↓

# ユーザー詳細の設定
# ユーザー名: aws-and-infra-wpadmin

# ↓

# AWS アクセスの種類を選択
# AWS 認証情報タイプを選択: アクセスキー - プログラムによるアクセスにチェック
#^ ※今回はWordPressからS3にアクセスできればいいので、プログラムによるアクセスになる。

# ↓
# 次のステップ:アクセス権限

# ↓

# アクセス許可の設定
# ⬇️
# 既存のポリシーを直接アタッチを選択
# ⬇️
# 検索: S3
# ⬇️
# AmazonS3FullAccessにチェック
#^ ※S3への操作であればなんでもできるという権限

# ↓
# 次のステップ: タグ

# ↓

# タグの追加 (オプション)
# 特に無し

# ↓
# 次のステップ: 確認

# ↓
# 確認

# ユーザー詳細
# ユーザー名
# aws-and-infra-wpadmin
# AWS アクセスの種類
# プログラムによるアクセス - アクセスキーを使用
# アクセス権限の境界
# アクセス権限の境界が設定されていません
# アクセス権限の概要
# 次のポリシー例は、上記のユーザーにアタッチされます。

# タイプ
# 名前
# 管理ポリシー
# AmazonS3FullAccess
# タグ
# 追加されたタグはありません。

# ↓
# ユーザーの作成

# ↓
# csvファイルをダウンロード

# aws-and-infra-wpadmin
# AKIAV6VMR75BDMRDWYG5
# JDKazQX+sm+MFud+yGByAcC+UUtDi+8rjCIFREeD


# これでS3のアクセス権限を持ったWordPress用のユーザーを作成できた。


# ----------------

#& AWS ② WordPressからS3に画をアップロードし、S３から配信されるように設定 [ストレージ]

# ⑴ プラグインのインストール

# ダッシュボード
# http://aws-and-infra-hashiudo.com/wp-admin/

# ↓
# プラグイン
# ↓
# 新規追加
# ↓
# 検索: WP Offload Media Lite for Amazon S3, DigitalOcean Spaces, and Google Cloud Storage
#^ ※S3に画像をアップロードするためのプラグイン
# ↓
# 今すぐインストール
# ↓
# 有効化

#^ ※プラグインを停止したいときは、「インストール済みプラグイン」のところから、無効化をクリックすればできる。

# ................

# ⑵ WP Offload Media Liteを動かすのに必要なライブラリをインストール

# ターミナル
# ↓
# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.65.52.250

# ↓

# sudo yum install -y php-xml php-gd php-devel.x86_64

# ↓

# Apacheの再起動
# sudo systemctl restart httpd.service
#^ ※WebサーバーであるApacheがインストールしたライブラリが読み込むように、サーバーの再起動をする

# ................

# ⑶ WP Offload Media Liteの設定

# WordPressのダッシュボード
# ↓
# リロード
# ↓
# 設定: Offload Media

# Define access keys in wp-config.php
#^ ※WordPressからS3にアクセスするのでアクセスキーを定義して下さいという意味。
# wp-config.phpというのが、サーバー上に置いてあるWordPressの設定ファイル。
# そちらにS3にアクセスするためのアクセスキーを入力して定義してくれと書いている。

# define( 'AS3CF_SETTINGS', serialize( array(
#     'provider' => 'aws',
#     'access-key-id' => '********************',
#     'secret-access-key' => '**************************************',
# ) ) );

# 上記をコピーし、wp-config.phpファイルに記載する。

# ↓

# ターミナル

# ↓

# sudo yum install -y vim

# ↓

# cd /var/www/html/

# ↓

# ls
# index.php        wp-blog-header.php    wp-cron.php        wp-mail.php
# license.txt      wp-comments-post.php  wp-includes        wp-settings.php
# readme.html      wp-config-sample.php  wp-links-opml.php  wp-signup.php
# wp-activate.php  wp-config.php         wp-load.php        wp-trackback.php
# wp-admin         wp-content            wp-login.php       xmlrpc.php

# ↓

# vim wp-config.php

# ↓

# 最後のif文よりも前に貼り付ける

# ↓
# S3へのアクセス権限を持ったIAMユーザーの認証情報である
# アクセスキーとシークレットアクセスキーを入力し保存

# S3アクセス権限が付与されたIAMユーザー

# ユーザー:
# aws-and-infra-wpadmin

# アクセスキー ID:
# AKIAV6VMR75BDMRDWYG5

# シークレットアクセスキ:
# JDKazQX+sm+MFud+yGByAcC+UUtDi+8rjCIFREeD

# ↓

# WordPress OffloadMedia
# ↓
# リロード
# ↓
# 上手く行ったら次の画面に遷移
# ↓
# Browse existing buckets

#  aws-and-infra-wp-hashiudo
#  aws-cloudtrail-logs-409457524546-a028cc7a

# ↓
# aws-and-infra-wp-hashiudoを選択

# ↓
# Save Selected Bucket

# これで設定が保存できた。


# STORAGE
# Provider:
# Amazon S3
# Bucket:
# aws-and-infra-wp-hashiudo

# ↓

# ADVANCED OPTIONS
# Remove Files From Server: ON
#^ ※今回S3に画像を分けて保存した理由が、サーバーの容量が画像で一杯にならないようにするというのが理由の一つだった。
# このオプションをONにすると、サーバーには保存せずに、S3にだけ保存するようになる。
# ↓
# Save Changes

# これで設定が完了した。

# これでWordPressから画像を投稿するとS3に保存されて、画像がS3から配信されるようになる。

# ................

# ⑷ WordPressからS3に画像をアップロードし、画像が表示されるか確認

# ダッシュボード
# ↓
# 投稿: 投稿一覧

# ↓

# サンプルのHello Worldを編集して試しに画像を投稿する

#^ ※著作権フリーな画像は、ツールのライセンスから絞れる。

# ↓
# 更新ボタンをクリック
# ↓
# 投稿を表示
# http://aws-and-infra-hashiudo.com/index.php/2022/04/14/hello-world/

# ................

# ⑸ 画像がS3から配信されているか確認

# 画像を右クリック
# ↓
# 画像アドレスをコピー
# ↓
# http://aws-and-infra-wp-hashiudo.s3.ap-northeast-1.amazonaws.com/wp-content/uploads/2022/04/15221413/203962-01_20220323145216851_010102_500_500.jpg

# S3からも確認
# ↓
# バケット
# ↓
# aws-and-infra-wp-hashiudo
# ↓
# wp-content/uploads/2022/04/...


# 整理すると、WordPressにOffload Mediaというプラグインを入れて、IAMユーザーも使用してS3とWordPressを連携させた結果、WordPressから画像を投稿すると、このようにS3に保存されるようになった。
# そして保存されたS3の画像がWeb上に配信されてユーザーに表示される。


# ----------------

#& AWS ③ CloudFrontディストリビューションの作成、 独自のドメインから画像を配信できるように設定、Offload Mediaで独自ドメインを登録 [ストレージ]

# ⑴  CloudFrontディストリビューションの作成
# CloudFront
# ↓
# CloudFrontディストリビューションを作成
#^ ※CloudFrontはディストリビューションに設定したルールに従ってオリジンサーバー(S3)からコンテンツをコピーして配信する
# ↓
# WebなのかRTMPなのか: Webを選択
#^ ※この画面無し
# ↓
# オリジンドメイン: aws-and-infra-wp-hashiudo.s3.ap-northeast-1.amazonaws.com
#^ ※オリジンサーバーのドメインの名前

# オリジンパス: 空
#^ ※S3の中でも特定のディレクトリ以下を指定したい場合はこれを指定する。

# 名前: オリジンドメインと同じ

# S3 バケットアクセス: OAI を使用しません
#^ ※ユーザーが画像にアクセスするときにS3のURLにアクセスして欲しくなくて、CloudFrontからのみアクセスしたいという場合はこちらを「はい」を選択する。
# 今回は、後ほどS3でアクセスした場合とCloudFrontでアクセスした場合の秒数、速さの計測をしたいので「はい」を選択しない。

# カスタムヘッダーを追加: 空

# オリジンシールドを有効にする: デフォルト

# ↓

# デフォルトのキャッシュビヘイビア
#^ ※キャッシュの方法やHTTPでアクセスする方法とかそういったっことが書かれている。
# 特にいじる必要無し。

# ↓

# 設定
#^ ※ここではディストリビューションのルールについて設定する

# 料金クラス: デフォルト
#^ ※どこから配信するかデフォルトだと「すべてのエッジロケーションを使用する」

# 残りの項目は特に設定する必要無し

# ↓
# ディストリビューションを作成

# ................

#^ ※今の状態だと、画像を配信するURLURLのドメインはCloudFrontのドメインになる。
#^ それでもいいが、できれば自分で設定した独自ドメインのドメインで画像を配信したい。その方が特にSEOにおいてよくて、画像のドメインというのは、本体のサイト自体のドメインと同じ場所であった方がよいという風にされている。
#^ そういうこともあり、CloudFrontから画像を配信するのではなく、自身の独自のドメインから画像を配信できるように設定する。

# ⑵ 独自のドメインから画像を配信できるように設定

# ID: E1XZ3580G73MY2をクリック
# ↓
# 編集
# ↓
# 代替ドメイン名 (CNAME): static.aws-and-infra-hashiudo.com
#^ ※ご自身が配信されたいドメインをここに記載する
#^ ※この場合、aws-and-infra-hashiudo.comが元々の同時ドメインで、そのドメインのサブドメインは、独自ドメインの上をドットで区切ったものをサブドメインと言う。
# 今回はstatic.というサブドメインを割り当てて、これを画像配信用のドメインとして使用する。
# ↓

# カスタム SSL 証明書

#^ ※CloudFrontで独自ドメインを設定するには、SSLの証明書を取得しておく必要がある。
# 手順としては、まずSSL証明書を取得する。次に取得したSSL証明書を設定する。

# 証明書をリクエスト をクリック
# ⬇️
# AWS Certificate Manager > 証明書 > 証明書をリクエストに遷移

#^ ※SSLサーバー証明書とは、Webサイトの運営者が本当にいるかを確認して、ブラウザとWebサーバーで暗号化した通信を行う際の電子証明書になる。
# 要は、サーバーを運営している人が本当にいるから、こちらの運営者は信用できるよと、なので暗号化した通信をしても大丈夫だよと、ブラウザとWebサーバーでやりとりするための証明書になる。
# では、証明書を発行していく。

# ⬇️
# 証明書タイプ: パブリック証明書をリクエスト
# 次へ
# ⬇️
# ドメイン名
#^ ※何のドメインに対して証明書を発行するのかを指定する

# 完全修飾ドメイン名: *.aws-and-infra-hashiudo.com
#^ ※:「*.」はワイルドカードで、サブドメインすべてを指定。

# この証明書に別の名前を追加: aws-and-infra-hashiudo.com
#^ ※本体の独自ドメイン

# ⬇️
# 検証方法を選択: DNSの検証
#^ ※これは証明書を発行する前に、今回リクエストしたドメインを確かに私が所有しているかどうかをAWS側が確認するための項目。
# 今、DNSの設定を自分でできる権利を持っているので、DNSの検証を選択。
# ⬇️
# リクエスト

# ⬇️

# 何が表示されているかと言うと、DNSがちゃんと設定できるかってことを確認してね、検証してねということが記載されている。
# DNSの設定がちゃんとできるということが確認できてから証明書を発行する。
# 何を設定するかと言うと、DNSの設定で各ドメインごとにここに記載されている名前でタイプと値を設定する。
# 今回二つドメインを指定したわけだが、二つとも同じ名前になっている。なので一つ登録すれば大丈夫というわけになっている。
# 今回DNSの設定はRoute53でやっているので、Route53を開く。

# 「Route53でのレコードの作成」ボタンをクリックし、「作成」をクリック

# ⬇️
# 続行

# ※検証保留中
# 私たちどうこうするというよりは、AWS側でドメイン名を検証しているので、その検証が終わるまで待つ。

# ↓
# CloudFrontの画面に戻り、リロード

# SSL証明書が発行済みになったら、状況の項目が発行済みとなる。
# ドメイン名にもちゃんと「*」が付いていて、追加の名前がドメイン名本体になっていることを確認。

# drrdgl5z9qiif.cloudfront.net ➡️ *.aws-and-infra-hashiudo.com

#^ ※ちなみに、追加の名前のところにドメイン名本体が入っていなかったら、サブドメインにのみ証明書が発行されるので、ドメイン本体にアクセスして
#^ も証明書が発行されるためには、追加の名前でドメイン本体の名前を入れておく。

# ↓
# ※独自ドメインを登録
# 代替ドメイン名 (CNAME) : static.aws-and-infra-hashiudo.com

# カスタム SSL 証明書: *.aws-and-infra-hashiudo.com  発行した証明書を選択

# ↓
# 残りの項目はそのままでOK
# 変更を保存

# これでCloudFrontのドメイン名をディストリビューションの代替ドメイン名として登録することができた。
# これでCloudFrontから画像を配信する時のドメイン名にstatic.aws-and-infra-hashiudo.comも使えるようになっている。
# drrdgl5z9qiif.cloudfront.net ➡️ static.aws-and-infra-hashiudo.com


# しかし、実際に画像配信されるときには、まだstatic.aws-and-infra-hashiudo.comで配信されない。

# あと追加でやらなければならないことが二つある。
# 1つ目は、Route53にstatic.aws-and-infra-hashiudo.comをdrrdgl5z9qiif.cloudfront.netだよと登録する必要がある。
# 画像のドメインはstatic.aws-and-infra-hashiudo.comから発行したいが、そうしたときそちらの飛び先がdrrdgl5z9qiif.cloudfront.netだよとRoute53の方に登録しておかないと、そういう風に認識してもらえないので、その登録をする。

# 2つ目が、Offload Mediaで画像を投稿した際のドメイン名というのが、このstatic.aws-and-infra-hashiudo.comだよと登録する。
# そうすると、WordPressで画像を投稿した際にドメイン名がこちらのstatic.aws-and-infra-hashiudo.comの独自ドメインのものになる。
# でこの独自ドメインにアクセスがあると、Route53がCloudFrontのドメイン名のことなんだなと認識してくれて、それで結果としてCloudFrontから画像が配信される。

# ................

# ⑶ Route53に登録

# Route53
# ↓
# ホストゾーン
# ↓
# aws-and-infra-hashiudo.comをクリック
# ↓
# レコードを作成
# ↓
# レコード名: static
# レコードタイプ: CNAME
# 値: drrdgl5z9qiif.cloudfront.net CloudFrontのドメイン名

# 他はそのまま
# ↓
# レコードを作成

# これで、static.aws-and-infra-hashiudo.comのCNAMEがdrrdgl5z9qiif.cloudfront.netのドメイン名だよという風にRoute53でできた。

# ................

# ⑷ Offload Mediaで独自ドメインを登録する

# ダッシュボード
# ↓
# 設定: Offload Media
# ↓
# Custom Domain: ON
# ↓
# 独自ドメインを入力
# static.aws-and-infra-hashiudo.com

# こういう風に入力すれば、Offload Mediaで画像を投稿した際に画像のドメインをstatic.aws-and-infra-hashiudo.comを使用するようにしてくれる。

# ↓
# Save Changes

# ................

# ⑸ 画像のドメインがちゃんと独自ドメインになっているか確認

# トップページ
# http://aws-and-infra-hashiudo.com/

# 画像アドレスコピー

# http://static.aws-and-infra-hashiudo.com/wp-content/uploads/2022/04/....

# ポイントはこのように独自ドメインからちゃんと画像が配信されていると。
# で、CloudFrontを使って配信されていることを確認。

# ................

# 最後にCloudFrontで配信することでS3よりも高速化されているのかを確認する。

# staticから始まる画像のURLをクリック
# ↓
# 右クリック > 検証
# ↓
# Network
# ↓
# スーパーリロード
# ※ブラウザに残されているキャッシュをクリアして画面をロードすること。
# つまりスーパーリロード することで、ユーザーが初回にアクセスしたときの表示速度を実際に再現できる。
# ↓
# Timeの項目を確認
# 22ms


# S3の場合を確認する

# S3
# ↓
# バケット
# ↓
# aws-and-infra-wp-hashiudo
# ↓
# パスを辿って、画像のURLを取得
# ↓
# オブジェクト URLをクリック
# ↓
# 以下同じ
# 110ms


# このように配信速度が大きく異なる。これがCloudFrontの効果。
# とはいえ、実際のところは、初回アクセスのときはすごく差は出るが、複数回目のアクセスのときは、ブラウザにキャッシュが残っているので、ここまでは実際に差は出なくなる。
# どちらかと言えばCloudFrontの方がやや早い程度。
# ただこれは日本からアクセスしているからであって、海外からアクセスするようにした場合、初回以外でも結構CloudFrontの方が速度が速くなる。
# これは今S3は東京のリージョンに置いてあるので、海外からだとアクセスに時間がかかるが、CloudFrontの場合は、エッジロケーションを利用してそちらの海外の方に近いエッジサーバーから画像が配信されるので、複数回のリロード でも結構秒数に差が出る。

# このように、海外からアクセスがある場合や、初回のアクセスのときは断然CloudFrontの方が早いし、リロードをし続けたときでも全体的にCloudFrontの方がやや早い傾向にあるので、CloudFrontを置いて方が高速化できる。

# キャッシュがある場合:
# 17ms
# 58ms->17ms

# **** ロードバランサー ****

#& AWS ① AMIからEC2を作成 [ロードバランサー]

# ⑴ パブリックサブネットの作成

# VPC
# ↓
# 東京リージョン
# ↓
# サブネット
# ↓
# サブネットの作成
# ↓
# サブネット名: aws-and-infra-public-subnet-1c
# VPC ID: aws-and-infra-vpc
# アベイラビリティーゾーン: 1c
# IPv4 CIDR ブロック: 10.0.11.0/24
# ↓
# サブネットを作成

# インターネットゲートウェイをアタッチする

# ルートテーブルの関連付けを行う

# aws-and-infra-public-subnet-1cを選択
# ↓
# ルートテーブル
# 10.0.0.0/16	local
# ↓
# ルートテーブルの関連付けの編集
# ↓
# ルートテーブル ID: aws-and-infra-public-route

# 送信先         ターゲット
# 10.0.0.0/16	local
# 0.0.0.0/0	igw-0c38d777dff3b2a88

# ↓
# 保存

# ................

# ⑵ AMIの作成

# EC2
# ↓
# インスタンス
# ↓
# aws-and-infra-webを選択
# ↓
# アクション
# ↓
# イメージ
# ↓
# イメージの作成

# イメージ名: aws-and-infra-web_202204016
# イメージの説明: aws-and-infra-web_202204016
# インスタンスボリューム: このままでOK

# ↓
# イメージの作成

# ↓
# AMI
# availableになったら、AMIからEC2インスタンスを起動することができる
# ↓
# 起動
# これでEC2インスタンスをこのAMIから起動することができる
# ↓
# インスタンスタイプ: t2.micro
# インスタンス数: 1

# ネットワーク設定 編集
# VPC : aws-and-infra-vpc
# サブネット: aws-and-infra-public-subnet-1c
# パブリック IP の自動割り当て : 有効化


# ファイアウォール (セキュリティグループ)
# 既存のセキュリティグループを選択する: チェック
# 共通のセキュリティグループ: aws-and-infra-web


# 高度なネットワーク設定 ネットワークインターフェイス 1
# プライマリ IP: 10.0.11.10

# キャパシティーの予約: なし  ※項目無し


# 名前とタグ: aws-and-infra-web

# ↓
# 起動
# ↓
# 既存のキーペアの選択
# キーペアの選択: aws-and-infra-ssh-key
# チェック
# ↓
# インスタンスの作成
# ↓
# インスタンスの表示

# ................

# ⑶各サーバーで表示される内容を書き分ける

# 次の動画でELBで負荷分散するが、その負荷分散されていることが確かめ易いようにWordPressで表示される内容を簡単に書き換えておく。

# ①1aにログインしてindex.phpを編集

# IPv4 パブリック IP: 54.65.52.250

# 1aのEC2インスタンスにログイン
# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.65.52.250

# 書き直したいので、WordPressのファイルがある場所に移動
# cd /var/www/html/

# index.phpがあるか確認 ※WordPressのTopページで表示される内容
# ls

# index.phpに書き込む
# sudo vim index.php

# 一番下に追記

# echo '<p>sample 1a</p>';

# :wqで保存

# exit

# ②1cにログインしてindex.phpを編集

# IPv4 パブリック IP: 18.181.248.227

# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@18.181.248.227

# echo '<p>sample 1c</p>';

# これで内容が1aと1cで異なるので、サーバーにアクセスした時に、どちらのサーバーが表示されているかわかる。

# ----------------

#& AWS ② ELBの作成 [ロードバランサー]

# ⑴ ELBの作成

# EC2
# ↓
# ロードバランサー
# ↓
# ロードバランサーの作成

#^ ※ロードバランサーには3種類ある。
# 1. Application Load Balancer:
# → こちらは通常のロードバランサーでWebサービスを作るときは基本的にこれを選択する

# 2. Network Load Balancer:
# → Application Load Balancerと比べると、ネットワークの通信の経路が異なってくる。
# Application Load Balancerの場合だと、通信の経路としてクライアントがあって、クラアントからApplication Load Balancerに通信が来る。
# で、そのApplication Load BalancerからWebサーバーに通信が来る。
# で、そこまで通信が来たら、Webサーバーから通信を返すときは、WebサーバーからApplication Load Balancerに返す。
# で、Application Load Balancerからクライアントに返すという流れになっている。
# 一方Network Load Balancerでは、行きは同じ。
# クライアント → Network Load Balancer → Webサーバー
# Application Load Balancerとは返りの経路が異なる。
# Webサーバーから直接クライアントに通信を返す。
# そのためより遅延の少ない形でレスポンスを返すことができる。
# しかし、通信を返すときにロードバランサーを通していないので、ちゃんとそのパケットが相手に届くかの担保を自分でやったりとか、色々と実装しないといけない。
# なのでこのネットワークロードバランサーに関しては、非常に高いパフォーマンスを求めるとき、特にTCPレイヤーでそういったものを求めるときはこちらを選ぶと良い。
# 普通のWebサービスを作るのであれば、Application Load Balancerを選ぶのがおすすめ。

# 3. Gateway Load Balancer:

# 4. Classic Load Balancer:
# → Network Load Balancerに近い

# ↓
# Application Load Balancerを選択して作成
# ↓
# 名前: aws-and-infra-alb

# スキーム: インターネット向け
#^ ※今回はインターネットからの通信に対応するためにロードバランサーを置くので、VPC内部のルーティングでは無いので、インターネット向けを選ぶ。

# IP アドレスタイプ: ipv4

# ↓

# リスナー
# ロードバランサーのプロトコル: HTTP
# ロードバランサーのポート: 80
# ※設定したプロトコルとポートを使用して、接続リクエストをチェックするプロセスになる。

# ↓

# アベイラビリティーゾーン

# VPC: aws-and-infra-vpc

# アベイラビリティーゾーン:
# ap-northeast-1a : aws-and-infra-public-subnet-1a
# ap-northeast-1c : aws-and-infra-public-subnet-1c

#^ ※今回aws-and-infra-public-subnet-1aにいるEC2サーバーとaws-and-infra-public-subnet-1cにいるEC2サーバーそれぞれに負荷を分散させていきたいので、それぞれのパブリックサブネットを選択しておく。

# ↓
# 次の手順: セキュリティグループの設定
# 次の手順: セキュリティグループの設定
# ↓

# セキュリティグループの設定

#^ ※ELBに関しては今までとは別の管理をしたいので、新しいセキュリティグループを作成する。

# セキュリティグループの割り当て: 新しいセキュリティグループを作成する

# セキュリティグループ名: aws-and-infra-alb
# 説明: aws-and-infra-alb

# タイプ: HTTP
# プロトコル: TCP
# ポート範囲: 80
# ソース: 0.0.0.0/0

#^ ※HTTPのアクセスをフルオープンにしておく。HTTPであればどんなアクセスもOKだよとする。

# ↓

# 次の手順: ルーティングの設定

# ↓

#^ ※ここでどちらのEC2にルーティングしていくか決める。

# ターゲットグループ

# ターゲットグループ: 新しいターゲットグループ
#^ ※新しいターゲットグループを作成しないといけないので、このまま。

# 名前: aws-and-infra-web-tg
#^ ※tg: target group


# ターゲットの種類: インスタンス
#^ ※EC2インスタンスをターゲットにしたいから、インスタンスを選択。

# プロトコル: HTTP

# ポート: 80

# ヘルスチェック
#^ ※どこのURLでヘルスチェックを行うかを指定
# このヘルスチェックを行うのをHTTPで、そのパスに対して通信を行なって、
# ALBの方から、それで正常なレスポンスが返って来たら、ヘルスチェックOKで、レスポンスが返って来なかったり、正常なレスポンスじゃないものが返って来たら、ヘルスチェックNGNGにするような仕組みになっている。

# で、ここで気を付けておかないといけないのが、ここで指定したパスが確かに存在すること。
# 今回WordPressの場合だと、「/」はトップページ。トップページは確かに存在して、レスポンスを正常に返すので、このパスのままで問題ない。

# プロトコル: HTTP
# パス: /

#  ヘルスチェックの詳細設定
#^ ※今回はここを書き換える。この後ヘルスチェックが失敗して実際異常があった方のEC2には通信がいかないというのを後ほど確認したい。でそのために正常の閾値の階数を減らしておいて、間隔も短くしてすぐにチェックするように変更する。
# 実際にサービスをやるときは、デフォルトの設定でいい。

# 正常のしきい値: 2
# 間隔: 10

# ↓

# 次の手順: ターゲットの登録

# ↓

#^ ※1aと1c、両方ともELBのターゲットに指定。
# チェックして、登録済みに追加

# ↓
# 次の手順: 確認
# ↓
# 作成

# ................

# ⑵ ELB経由でWebサイトにアクセス

# ロードバランサー
# ↓
# aws-and-infra-alb
# ↓

# DNS 名aws-and-infra-alb-797315117.ap-northeast-1.elb.amazonaws.com

#^ ※これがELBのDNS名。

# これをコピーしてURLに貼り付けてアクセスすると、ELBにアクセスできる
# ↓
# WordPressのトップページが表示された

#^ ※これは今ELBにアクセスが来て、そのELBからWebサイトにアクセスが行っている状態。
# 一番下を見てみると、sample 1aとある。
# こちら1aの方のサーバーにアクセスが行っているということ。
# 何回かリロード してみると、1cに変わった。
# 今度は1cの方のサーバーにアクセスが行った。
# これ何回もリロード すると1aに変わったり、1cに変わったりと交互に変わる。

# 実際こういう風な形でアクセスがたくさんあると、サーバーにELBがアクセスを振り分けてくれる。

# ................

# 今だと独自ドメインからアクセスした時に、EC2に直接通信が行ってしまうので、Route53の方で同時ドメインにアクセスしたら、ELBの方にアクセスが来るように設定する。


# ⑶ 独自ドメインからELBにアクセスするように設定

# Route53
# ↓
# ホストゾーン
# ↓
# aws-and-infra-hashiudo.com
# ↓

# 今独自ドメインaws-and-infra-hashiudo.comは、Aレコードで54.65.52.250が登録されている。これはEC2の1aに方のパブリックIP。
# なので、独自ドメインでアクセスすると1aの方のWebサーバーに直接通信が行く。
# ここをELBの方にアクセスが来るように変更する。

# Aレコードを編集
# ↓
# エイリアス: オン
#^ ※ロードバランサーのDNS名はAレコードのエイリアスを使うと、作成したELBを選択できる。

# Application Load Balancer
# 東京リージョン
# 作成したロードバランサー

# ↓
# 保存

# aws-and-infra-hashiudo.com
# A
# シンプル
# dualstack.aws-and-infra-alb-797315117.ap-northeast-1.elb.amazonaws.com.


#^ ⑷ 確認

# aws-and-infra-hashiudo.com

# 何回かリロード すると1aと1cが交互に変わることが確認できた。

# ................

#  ヘルスチェックの確認

#^ ※サーバーが2台あるので、1台サーバーを止めてみて、そちらのサーバーには通信が行かず、正常な方の一台だけに通信が行く。停止したサーバーがまた復活したら、そちらの方にまた通信が行き直すという形でヘルスチェックがどのように機能するかを最後に実際に見ておく。

# ⑴ 1aのサーバーを止める

# 1aのサーバーにログインしてApacheを止める

# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.65.52.250

# sudo systemctl stop httpd.service
# sudo systemctl status httpd.service

#  Active: inactive (dead)

# ................

# ⑵ ドメインに何回かアクセスする

# aws-and-infra-hashiudo.com

# すると何度アクセスしても1cの方にしかアクセスがいかない。
# なぜかと言うと、1aのサーバーが止まって、今ヘルスチェックがNGになったので、1cの方にしか通信が行かなくなっている。

# もしかすると、コマンドを打った直後だと、Webサイトすぐにアクセスしてしまうと1aと1c両方表示されるかも知れない。
# でかつ1aの方にアクセスが行った場合は、502 Bad Gateway が表示されるかもしれない。
# なぜかと言うと、ヘルスチェックが10秒の間隔内にサーバーをストップした後にアクセスしてしまうとそのようなことが起きる。

# 実際どういう風にELBの方でなっているか確認

# ロードバランサー
# ↓
# ターゲットグループ
# ↓
# aws-and-infra-web-tg
# ↓
# ターゲット

# i-0e99000eb739989a1
# aws-and-infra-web
# 80
# ap-northeast-1a
# unhealthy
# Health checks failed

# i-021bd202c0a0fba35
# aws-and-infra-web
# 80
# ap-northeast-1c
# healthy
# このターゲットは、現在ターゲットグループのヘルスチェックに合格しています。


# 1aはunhealthyで、1cはhealthyになっている。
# このようにunhealthyだとunhealthyのサーバーの方には通信を送らないというのをELBはしてくれる。
# そのため1cの方のサーバーしか通信が行かなかった。


# 1aのApacheを起動して再度確認

# i-0e99000eb739989a1
# aws-and-infra-web
# 80
# ap-northeast-1a
# healthy
# このターゲットは、現在ターゲットグループのヘルスチェックに合格しています。


# ----------------

#& AWS ③ EC2の台数を1台に戻す [ロードバランサー]

# 最後に料金がかかり過ぎないように、EC2台数を2台から1台に戻す。

# ※2台あると無料枠を超えて結構料金がかかってしまう。

# EC2
# ↓
# ロードバランサー
# ↓
# ターゲットグループ
# ↓
# ターゲット
# ↓
# １台減らす

# 編集 →1cを削除 → 保存

# しばらく待つと登録済みターゲットから外れるはずなので、
# まず登録済みターゲットから外して、その上でサーバー自体も削除する。

# ↓
# インスタンス
# ↓
# 削除対象チェック
# ↓
# アクション
# ↓
# インスタンスの状態
# ↓
# 終了


# **** マスタースレーブ構成 ****

#& AWS ① マルチAZを有効と無効化 [マスタースレーブ構成]

# RDS
# ↓
# データベース
# ↓
# aws-and-infra-web
# ↓
# 設定
# ↓
# 変更
# ↓
# 可用性と耐久性: マルチ AZ 配置
# ↓
# 続行
# ↓
# 変更のスケジューリング: すぐに適用
# ↓
# DBインスタンスの変更

# 見た目状はaws-and-infraしか無いが、裏では実は2台動いている。


# ................

# 後片付け
# - RDSのマスタースレーブ構成をやめ、元の1台運用に戻そう


# マスタースレーブ構成にすると、ぱっと見は一台しか動いていないように見えるが、2台動いているので、2台分のRDSの料金がかかってしまう。
# しかもRDSは結構料金が高めなので、1台に戻しておく。

# ................

# RDS
# ↓
# データベース
# ↓
# aws-and-infra-web
# ↓
# 設定
# ↓
# 変更
# ↓
# 可用性と耐久性:スタンバイ
# ↓
# 続行
# ↓
# 変更のスケジューリング: すぐに適用
# ↓
# DBインスタンスの変更


# **** システム監視 ****

#& AWS ① CloudWatchのアラームを作成  [システム監視]

# ⑴ CloudWatchのアラームを作成

# CloudWatch
# ↓
# アラーム
# ↓
# アラームの状態
# ↓
# アラームの作成
# ↓
# メトリクスの選択
# ↓
# メトリクス
# EC2をクリック ※今回はEC2のCPU使用率を見たいので
# ↓
# インスタンス別メトリクス
# ↓
# CPUUtilization ※これがCPUの使用率

# チェック入れて、
# ↓
# メトリクスの選択

# これでCPU使用率に対してアラームをつけることができるようになった。

# メトリクスと条件の指定
# メトリクス
# 期間: 1分
# ※期間だけ早めておく。これは単にアラームすぐに検知できるようにするため。

# 条件
# しきい値の種類: 静的
# CPUUtilization が次の時...: 以上
# ... よりも: 60

#^ ※これでCPU使用率が60%以上になったらアラームを通知するという設定になった

# ↓
# 次へ
# ↓

# アクションの設定

# 通知
# SNS トピックの選択: 新しいトピックの作成

# トピック名: cloudwatch_alarms_topic
# 通知を受け取る E メールエンドポイント: 0chlbv7420t18063263g7t20@gmail.com

# トピックの作成

# ↓

# SNS トピックの選択: 既存の SNS トピックを選択
# 通知の送信先: cloudwatch_alarms_topic
# E メール (エンドポイント): 0chlbv7420t18063263g7t20@gmail.com

# ↓
# 次へ
# ↓

# 名前と説明を追加

# アラーム名: aws-and-infra-ec2-cpu
# アラームの説明:  aws-and-infra-ec2-cpu

# ↓
# 次へ
# ↓
# 確認して
# ↓
# アラームの作成

#! 🚨ここでひとつ大事なことがあって、
#! 「一部サブスクリプションが確認待ちの状態です」と表示されている。
#! これは先ほど途中でSNSトピックを作成したかと思いますが、そちらで指定したメールアドレスの方に認証のメールが届いている。
#! メールを開いて認証する。

#! 認証を完了させないと何かAlarmが起きてもEメールの方に通知してくれない。

# ................

# ⑵アラームの確認


# CPUUtilization
# 1 分内の1データポイントのCPUUtilization >= 60

# 閾値
# 1 分内の1データポイントのCPUUtilization >= 60


# Simple Notification Service
# ↓
# トピック
# ↓
# cloudwatch_alarms_topic
# ↓

# サブスクリプション
# ID:  0bc8238d-1d23-4fa1-a757-d23aed89a07f
# ｴﾝﾄﾞﾎﾟｲﾝﾄ:  0chlbv7420t18063263g7t20@gmail.com

#^ ※実はAmazon SNSトピックを作るとトピック(cloudwatch_alarms_topic)が出来て、メールアドレスの指定はサブスクリプションの方でされている。
#^ でこのトピック(cloudwatch_alarms_topic)がそちらのメールアドレスのサブスクリプション(0chlbv7420t18063263g7t20@gmail.com)を指定しているので、今回してしたEメールの方に通知が来ると言う仕組みになっている。

# ----------------

#& AWS ② アラームの確認 [システム監視]

# CloudWatch
# ↓
# アラーム
# ↓
# すべてのアラーム
# ↓
# aws-and-infra-ec2-cpu

# 状態がOKになったら、


# EC2にログイン
# EC2
# ↓
# インスタンス
# ↓
# aws-and-infra-web
# ↓
# IPv4 パブリック IP: 54.65.52.250
# ↓
# ターミナル
# ↓

# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.65.52.250

# ↓

# 負荷をかける (5回くらい)
# yes > /dev/null &

# ↓
# CPUの状態を確認
# top

# 10112 ec2-user  20   0  114636    748    688 R 20.0  0.1   0:15.42 yes
# 10114 ec2-user  20   0  114636    772    708 R 20.0  0.1   0:14.89 yes
# 10108 ec2-user  20   0  114636    756    692 R 19.7  0.1   0:30.98 yes
# 10111 ec2-user  20   0  114636    720    656 R 19.7  0.1   0:15.98 yes
# 10113 ec2-user  20   0  114636    752    688 R 19.7  0.1   0:15.10 yes

# CPU使用率 = 20.0 * 5 = 100%

# これを続けていると負荷がかかり続けるので、しばらく放置。
# 5分から10分



# CloudWatch
# ↓
# アラーム
# ↓
# aws-and-infra-ec2-cpu

# するとアラーム状態になっている。

# グラフから、CPU使用率の上昇がわかる。

# ↓

# メールの通知を確認

# ALARM: "aws-and-infra-ec2-cpu" in Asia Pacific (Tokyo)

# ................

# 後か付けでCPUを解放する


# バックグランドで実行しているyesコマンドを解除する。

# ps aux | grep yes

# こちらでyesコマンドのプロセスが表示される。

# このプロセスを停止させる。

# kill -9 <ﾌﾟﾛｾｽID>

# 指定したプロセスをキルできる。


# **** アクセス権限 ****

#& AWS ① IAMポリシーの作成 [アクセス権限]

# DeveloperPolicyとDirectorPolicyを作成する

# ⑴ DeveloperPolicy

# IAM
# ↓
# ポリシー
# ↓
# ポリシーの作成
# ↓

#^ ※ポリシーはひとつひとつのサービスに対して、どんなアクションができるかを定義していく。


# サービス: EC2
# アクション: すべての EC2 アクション (ec2:*)
# リソース: すべてのリソース

#^ ※これでEC2のすべてのリソースに対して、すべての操作ができるようになった。

# ⬇️
# さらにアクセス許可を追加する
# ⬇️
# サービス: RDS
# アクション: すべての EC2 アクション (ec2:*)
# リソース: すべてのリソース

# ↓
# 次のステップ: タグ
# ↓
# 次のステップ: 確認
# ↓

# ポリシーの確認

# 名前: AwsAndInfraDeveloperPollicy
# 説明: AwsAndInfraDeveloperPollicy

# ↓
# ポリシーの作成

# ................

# ⑵ DirectorPolicy

# ポリシーの作成
# ↓
# サービス: EC2
# アクション: 読み込み
# リソース: すべてのリソース

# ↓
# 次のステップ: タグ
# ↓
# 次のステップ: 確認
# ↓

# ポリシーの確認

# 名前: AwsAndInfraDirectorPollicy
# 説明: AwsAndInfraDirectorPollicy

# ↓
# ポリシーの作成


# ----------------

#& AWS ② IAMグループとIAMユーザーの作成と権限の確認 [アクセス権限]

# ⑴ グループの作成

# IAM
# ↓
# ユーザーグループ
# ↓
# グループを作成
# ↓
# ユーザーグループ名: AwsAndInfraDevelopers
# アクセス許可ポリシーを添付: AwsAndInfraDeveloperPollicyをチェック
#^ ※ユーザーは後から所属させる
# ↓
# グループを作成


# グループを作成
# ↓
# ユーザーグループ名: AwsAndInfraDirectors
# アクセス許可ポリシーを添付: AwsAndInfraDirectorPollicyをチェック
# ↓
# グループを作成

# ................

# ⑵ ユーザーの作成

# kume taguchiを作成

# IAM
# ↓
# ユーザー
# ↓
# ユーザーを追加
# ↓
# ユーザー名: kume taguchi

# AWS 認証情報タイプを選択: パスワード - AWS マネジメントコンソールへのアクセス
#^ ※人だから

# コンソールのパスワード:
# カスタムパスワード: password
#^ ※本当は自動生成パスワードがいい

# パスワードのリセットが必要: チェック
#^ ※ユーザーがログインしたタイミングでパスワードをリセットするかどうかの設定。

# ↓
# 次のステップ: アクセス権限
# ↓

# アクセス許可の設定: ユーザーをグループに追加
# ユーザーをグループに追加: AwsAndInfraDevelopers

# ↓
# 次のステップ: タグ
# ↓
# 次のステップ: 確認
# ↓
# ユーザーの作成

# kumeのパスワード:  6[L+G+nMH3C)rcq
# taguchiのパスワード:  !2I71WC'zv8Q9Hz


# fukushimaを作成

# IAM
# ↓
# ユーザー
# ↓
# ユーザーを追加
# ↓
# ユーザー名: fukushima
# AWS 認証情報タイプを選択: パスワード - AWS マネジメントコンソールへのアクセス
# コンソールのパスワード:
# カスタムパスワード: password

# ↓
# 次のステップ: アクセス権限
# ↓

# アクセス許可の設定: ユーザーをグループに追加
# ユーザーをグループに追加: AwsAndInfraDirectors

# ↓
# 次のステップ: タグ
# ↓
# 次のステップ: 確認
# ↓
# ユーザーの作成


# fukushimaのパスワード: D'Jue|C1wwg'^})

# ................

# それぞれのポリシーでログインし直して、それぞれの権限にあった操作しかできないことを確認する。

# kumeのパスワード:  6[L+G+nMH3C)rcq
# taguchiのパスワード:  !2I71WC'zv8Q9Hz
# fukushimaのパスワード: D'Jue|C1wwg'^})

# サインアウト
# ↓
# コンソールにサインイン
# ↓

# kumeのパスワード:  6[L+G+nMH3C)rcq
# taguchiのパスワード:  !2I71WC'zv8Q9Hz
# fukushimaのパスワード: D'Jue|C1wwg'^})

# ↓
# 古いパスワード
# 新しいパスワード:

# kumeのパスワード:  UwVZZT9aG4Hb
# taguchiのパスワード:  !2I71WC'zv8Q9Hz
# fukushimaのパスワード: DkLKutnJ4QXr

# ................

# ⑴ kume

# 東京リージョン
# ↓
# EC2
# ↓
# インスタンス
# ↓
# インスタンス作成

# Amazon マシンイメージ (AMI): Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type

# インスタンスタイプの選択: t2.micro

# ↓
# 確認と作成
# ↓
# 起動
# ↓
# 既存のキーペア

# EC2インスタンスが作成できることを確認できた。

#! 🚨インスタンスはhashiudoでログインして削除しておく。


# ................

# ⑵ fukushima

# サインアウト
# ↓
# ログイン
# ↓
# 東京リージョン
# ↓
# EC2
# ↓
# インスタンス
# ↓
# インスタンス作成

# 選択された AMI の記述中にエラーが発生しました
# You are not authorized to perform this operation.

# インスタンスが作成できないことが確認できた。


# ----------------

#& AWS ③ IAMロールの作成と権限の確認 [アクセス権限]

# ⑴ EC2からS3のバケット一覧を取得するコマンドを打っても取得できないことを確認

# EC2
# ↓
# aws-and-infra-web
# ↓
# IPv4 パブリック IP: 54.65.52.250
# ↓
# ターミナル

# ssh -i ~/Documents/aws/pem/aws-and-infra-ssh-key.pem ec2-user@54.65.52.250


# aws s3 ls
# ※EC2からS3のバケット一覧を取得するコマンド

# Unable to locate credentials. You can configure credentials by running "aws configure".

# ................

# ⑵ ロールを作成して、ロールをEC2にアタッチし、EC2からS3のバケット一覧を取得することができることを確認

# ①ロールの作成
# IAM
# ↓
# ロール
# ↓
# ロールを作成
# ↓

# ユースケース
# 一般的なユースケース: EC2

# ↓
# 次へ
# ↓
# 許可を追加

# 許可ポリシー : AmazonS3FullAccess

# ↓
# 次へ
# ↓

# 名前、確認、および作成

# ロール名: AwsAndInfraWeb
# 説明: そのまま

# ↓
# ロールを作成


# ②ロールをEC2にアタッチ
# EC2
# ↓
# 東京リージョン
# ↓
# インスタンス
# ↓
# aws-and-infra-web
# ↓
# アクション
# ↓
# インスタンスの設定
# ↓
# IAMロールの割り当て/置換
# ↓

# IAM ロールの割り当て/置換
# IAM ロール: AwsAndInfraWeb

# ↓
# 適用

# アタッチできたか確認
# IAM ロール AwsAndInfraWeb

# ③EC2からS3のバケット一覧を取得することができることを確認

# ターミナル

# aws s3 ls

# 2022-04-15 05:01:53 aws-and-infra-wp-hashiudo
# 2021-12-18 08:05:00 aws-cloudtrail-logs-409457524546-a028cc7a


# ==== AWS ECS(Fargate) ====

# https://www.udemy.com/course/ecsfargate/

# 記事
# https://zenn.dev/endo/books/6c9c8e9e74a3d30bcf08
# https://zenn.dev/nicopin/books/58c922f51ea349
